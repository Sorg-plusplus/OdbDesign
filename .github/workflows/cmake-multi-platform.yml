# run CMake build on Windows and Linux
name: CMake Build Multi-Platform

on:
  push:
    branches: [ "development", "main" ]
  pull_request:
    branches: [ "development" ]

env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  #CL_PATH: "\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64\""

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          # Windows x64 Release
          - os: windows-2022
            preset: x64-release
          # Linux x64 Release          
          - os: ubuntu-22.04
            preset: linux-release
          # MacOS x64 Release
          - os: macos-11.0
            preset: macos-release
          # Linux mingw x64 Release
          - os: ubuntu-22.04
            preset: linux-mingw-w64-release
          # Windows Python x64 Release
          - os: windows-2022
            preset: python-x64-release

    steps:      
    - uses: actions/checkout@v3            
    
    - name: Install vcpkg
      run: |               
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git ${{env.VCPKG_ROOT}}
        "${{env.VCPKG_ROOT}}/bootstrap-vcpkg.sh"
      # only on linux (Windows comes w/ vcpkg installed as part of VS)   
      if: matrix.os == 'ubuntu-22.04'

    # install Ninja 
    - name: Install Ninja    
      uses: seanmiddleditch/gha-setup-ninja@master
      #if: matrix.os == 'ubuntu-22.04'

    - name: Setup VC Tools
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-2022'
      
    - name: Patch vcpkg
      run: scripts/patch-vcpkg-install.ps1
      if: matrix.os == 'windows-2022'
        
    - name: CMake Configure      
      run: cmake --preset ${{matrix.preset}}    

    - name: CMake Build          
      run: cmake --build --preset ${{matrix.preset}} 

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
    # run: ctest --preset ${{matrix.preset}}}
