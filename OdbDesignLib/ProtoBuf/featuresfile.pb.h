// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featuresfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_featuresfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_featuresfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_featuresfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_featuresfile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_featuresfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class FeaturesFile;
struct FeaturesFileDefaultTypeInternal;
extern FeaturesFileDefaultTypeInternal _FeaturesFile_default_instance_;
class FeaturesFile_FeatureRecord;
struct FeaturesFile_FeatureRecordDefaultTypeInternal;
extern FeaturesFile_FeatureRecordDefaultTypeInternal _FeaturesFile_FeatureRecord_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ::Odb::Lib::Protobuf::FeaturesFile* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::FeaturesFile>(Arena*);
template<> ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class FeaturesFile_FeatureRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord) */ {
 public:
  inline FeaturesFile_FeatureRecord() : FeaturesFile_FeatureRecord(nullptr) {}
  ~FeaturesFile_FeatureRecord() override;
  explicit PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeaturesFile_FeatureRecord(const FeaturesFile_FeatureRecord& from);
  FeaturesFile_FeatureRecord(FeaturesFile_FeatureRecord&& from) noexcept
    : FeaturesFile_FeatureRecord() {
    *this = ::std::move(from);
  }

  inline FeaturesFile_FeatureRecord& operator=(const FeaturesFile_FeatureRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturesFile_FeatureRecord& operator=(FeaturesFile_FeatureRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeaturesFile_FeatureRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeaturesFile_FeatureRecord* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile_FeatureRecord*>(
               &_FeaturesFile_FeatureRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeaturesFile_FeatureRecord& a, FeaturesFile_FeatureRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FeaturesFile_FeatureRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturesFile_FeatureRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeaturesFile_FeatureRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeaturesFile_FeatureRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeaturesFile_FeatureRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeaturesFile_FeatureRecord& from) {
    FeaturesFile_FeatureRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeaturesFile_FeatureRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord";
  }
  protected:
  explicit FeaturesFile_FeatureRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContourPolygonsFieldNumber = 1,
  };
  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  int contourpolygons_size() const;
  private:
  int _internal_contourpolygons_size() const;
  public:
  void clear_contourpolygons();
  ::Odb::Lib::Protobuf::ContourPolygon* mutable_contourpolygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon >*
      mutable_contourpolygons();
  private:
  const ::Odb::Lib::Protobuf::ContourPolygon& _internal_contourpolygons(int index) const;
  ::Odb::Lib::Protobuf::ContourPolygon* _internal_add_contourpolygons();
  public:
  const ::Odb::Lib::Protobuf::ContourPolygon& contourpolygons(int index) const;
  ::Odb::Lib::Protobuf::ContourPolygon* add_contourpolygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon >&
      contourpolygons() const;

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon > contourpolygons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_featuresfile_2eproto;
};
// -------------------------------------------------------------------

class FeaturesFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FeaturesFile) */ {
 public:
  inline FeaturesFile() : FeaturesFile(nullptr) {}
  ~FeaturesFile() override;
  explicit PROTOBUF_CONSTEXPR FeaturesFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeaturesFile(const FeaturesFile& from);
  FeaturesFile(FeaturesFile&& from) noexcept
    : FeaturesFile() {
    *this = ::std::move(from);
  }

  inline FeaturesFile& operator=(const FeaturesFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturesFile& operator=(FeaturesFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeaturesFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeaturesFile* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile*>(
               &_FeaturesFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeaturesFile& a, FeaturesFile& b) {
    a.Swap(&b);
  }
  inline void Swap(FeaturesFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturesFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeaturesFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeaturesFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeaturesFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeaturesFile& from) {
    FeaturesFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeaturesFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.FeaturesFile";
  }
  protected:
  explicit FeaturesFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FeaturesFile_FeatureRecord FeatureRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureRecordsFieldNumber = 8,
    kUnitsFieldNumber = 1,
    kPathFieldNumber = 5,
    kDirectoryFieldNumber = 6,
    kIdFieldNumber = 2,
    kNumFeaturesFieldNumber = 7,
  };
  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  int featurerecords_size() const;
  private:
  int _internal_featurerecords_size() const;
  public:
  void clear_featurerecords();
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* mutable_featurerecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >*
      mutable_featurerecords();
  private:
  const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& _internal_featurerecords(int index) const;
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* _internal_add_featurerecords();
  public:
  const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& featurerecords(int index) const;
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* add_featurerecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >&
      featurerecords() const;

  // optional string units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional string path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string directory = 6;
  bool has_directory() const;
  private:
  bool _internal_has_directory() const;
  public:
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // optional uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional int32 numFeatures = 7;
  bool has_numfeatures() const;
  private:
  bool _internal_has_numfeatures() const;
  public:
  void clear_numfeatures();
  int32_t numfeatures() const;
  void set_numfeatures(int32_t value);
  private:
  int32_t _internal_numfeatures() const;
  void _internal_set_numfeatures(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FeaturesFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord > featurerecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
    uint32_t id_;
    int32_t numfeatures_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_featuresfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeaturesFile_FeatureRecord

// repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
inline int FeaturesFile_FeatureRecord::_internal_contourpolygons_size() const {
  return _impl_.contourpolygons_.size();
}
inline int FeaturesFile_FeatureRecord::contourpolygons_size() const {
  return _internal_contourpolygons_size();
}
inline ::Odb::Lib::Protobuf::ContourPolygon* FeaturesFile_FeatureRecord::mutable_contourpolygons(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _impl_.contourpolygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon >*
FeaturesFile_FeatureRecord::mutable_contourpolygons() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return &_impl_.contourpolygons_;
}
inline const ::Odb::Lib::Protobuf::ContourPolygon& FeaturesFile_FeatureRecord::_internal_contourpolygons(int index) const {
  return _impl_.contourpolygons_.Get(index);
}
inline const ::Odb::Lib::Protobuf::ContourPolygon& FeaturesFile_FeatureRecord::contourpolygons(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _internal_contourpolygons(index);
}
inline ::Odb::Lib::Protobuf::ContourPolygon* FeaturesFile_FeatureRecord::_internal_add_contourpolygons() {
  return _impl_.contourpolygons_.Add();
}
inline ::Odb::Lib::Protobuf::ContourPolygon* FeaturesFile_FeatureRecord::add_contourpolygons() {
  ::Odb::Lib::Protobuf::ContourPolygon* _add = _internal_add_contourpolygons();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon >&
FeaturesFile_FeatureRecord::contourpolygons() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _impl_.contourpolygons_;
}

// -------------------------------------------------------------------

// FeaturesFile

// optional string units = 1;
inline bool FeaturesFile::_internal_has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeaturesFile::has_units() const {
  return _internal_has_units();
}
inline void FeaturesFile::clear_units() {
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeaturesFile::units() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeaturesFile::set_units(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.units_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.units)
}
inline std::string* FeaturesFile::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.units)
  return _s;
}
inline const std::string& FeaturesFile::_internal_units() const {
  return _impl_.units_.Get();
}
inline void FeaturesFile::_internal_set_units(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.units_.Set(value, GetArenaForAllocation());
}
inline std::string* FeaturesFile::_internal_mutable_units() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.units_.Mutable(GetArenaForAllocation());
}
inline std::string* FeaturesFile::release_units() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.units_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FeaturesFile::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.units_.SetAllocated(units, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.units)
}

// optional uint32 id = 2;
inline bool FeaturesFile::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeaturesFile::has_id() const {
  return _internal_has_id();
}
inline void FeaturesFile::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FeaturesFile::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t FeaturesFile::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.id)
  return _internal_id();
}
inline void FeaturesFile::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void FeaturesFile::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.id)
}

// optional string path = 5;
inline bool FeaturesFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeaturesFile::has_path() const {
  return _internal_has_path();
}
inline void FeaturesFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FeaturesFile::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeaturesFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.path)
}
inline std::string* FeaturesFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.path)
  return _s;
}
inline const std::string& FeaturesFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void FeaturesFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* FeaturesFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* FeaturesFile::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FeaturesFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.path)
}

// optional string directory = 6;
inline bool FeaturesFile::_internal_has_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeaturesFile::has_directory() const {
  return _internal_has_directory();
}
inline void FeaturesFile::clear_directory() {
  _impl_.directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FeaturesFile::directory() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeaturesFile::set_directory(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.directory)
}
inline std::string* FeaturesFile::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.directory)
  return _s;
}
inline const std::string& FeaturesFile::_internal_directory() const {
  return _impl_.directory_.Get();
}
inline void FeaturesFile::_internal_set_directory(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.directory_.Set(value, GetArenaForAllocation());
}
inline std::string* FeaturesFile::_internal_mutable_directory() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.directory_.Mutable(GetArenaForAllocation());
}
inline std::string* FeaturesFile::release_directory() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.directory)
  if (!_internal_has_directory()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.directory_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FeaturesFile::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.directory_.SetAllocated(directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.directory)
}

// optional int32 numFeatures = 7;
inline bool FeaturesFile::_internal_has_numfeatures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeaturesFile::has_numfeatures() const {
  return _internal_has_numfeatures();
}
inline void FeaturesFile::clear_numfeatures() {
  _impl_.numfeatures_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t FeaturesFile::_internal_numfeatures() const {
  return _impl_.numfeatures_;
}
inline int32_t FeaturesFile::numfeatures() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.numFeatures)
  return _internal_numfeatures();
}
inline void FeaturesFile::_internal_set_numfeatures(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.numfeatures_ = value;
}
inline void FeaturesFile::set_numfeatures(int32_t value) {
  _internal_set_numfeatures(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.numFeatures)
}

// repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
inline int FeaturesFile::_internal_featurerecords_size() const {
  return _impl_.featurerecords_.size();
}
inline int FeaturesFile::featurerecords_size() const {
  return _internal_featurerecords_size();
}
inline void FeaturesFile::clear_featurerecords() {
  _impl_.featurerecords_.Clear();
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* FeaturesFile::mutable_featurerecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _impl_.featurerecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >*
FeaturesFile::mutable_featurerecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return &_impl_.featurerecords_;
}
inline const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& FeaturesFile::_internal_featurerecords(int index) const {
  return _impl_.featurerecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& FeaturesFile::featurerecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _internal_featurerecords(index);
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* FeaturesFile::_internal_add_featurerecords() {
  return _impl_.featurerecords_.Add();
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* FeaturesFile::add_featurerecords() {
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* _add = _internal_add_featurerecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >&
FeaturesFile::featurerecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _impl_.featurerecords_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_featuresfile_2eproto
