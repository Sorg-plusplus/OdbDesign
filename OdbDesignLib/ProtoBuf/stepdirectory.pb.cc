// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stepdirectory.proto

#include "stepdirectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Odb {
namespace Lib {
namespace Protobuf {
PROTOBUF_CONSTEXPR StepDirectory_LayersByNameEntry_DoNotUse::StepDirectory_LayersByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepDirectory_LayersByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal _StepDirectory_LayersByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepDirectory_NetlistsByNameEntry_DoNotUse::StepDirectory_NetlistsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepDirectory_NetlistsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal _StepDirectory_NetlistsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepDirectory::StepDirectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layersbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.netlistsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.edadatafile_)*/nullptr
  , /*decltype(_impl_.attrlistfile_)*/nullptr} {}
struct StepDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepDirectoryDefaultTypeInternal() {}
  union {
    StepDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepDirectoryDefaultTypeInternal _StepDirectory_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
static ::_pb::Metadata file_level_metadata_stepdirectory_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_stepdirectory_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stepdirectory_2eproto = nullptr;

const uint32_t TableStruct_stepdirectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.layersbyname_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.netlistsbyname_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.edadatafile_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::StepDirectory, _impl_.attrlistfile_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse)},
  { 20, 32, -1, sizeof(::Odb::Lib::Protobuf::StepDirectory)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Odb::Lib::Protobuf::_StepDirectory_LayersByNameEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_StepDirectory_NetlistsByNameEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_StepDirectory_default_instance_._instance,
};

const char descriptor_table_protodef_stepdirectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023stepdirectory.proto\022\020Odb.Lib.Protobuf\032"
  "\021edadatafile.proto\032\021netlistfile.proto\032\024l"
  "ayerdirectory.proto\032\022attrlistfile.proto\""
  "\237\004\n\rStepDirectory\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\021\n\004"
  "path\030\002 \001(\tH\001\210\001\001\022G\n\014layersByName\030\003 \003(\01321."
  "Odb.Lib.Protobuf.StepDirectory.LayersByN"
  "ameEntry\022K\n\016netlistsByName\030\004 \003(\01323.Odb.L"
  "ib.Protobuf.StepDirectory.NetlistsByName"
  "Entry\0227\n\013edadatafile\030\005 \001(\0132\035.Odb.Lib.Pro"
  "tobuf.EdaDataFileH\002\210\001\001\0229\n\014attrlistfile\030\006"
  " \001(\0132\036.Odb.Lib.Protobuf.AttrListFileH\003\210\001"
  "\001\032U\n\021LayersByNameEntry\022\013\n\003key\030\001 \001(\t\022/\n\005v"
  "alue\030\002 \001(\0132 .Odb.Lib.Protobuf.LayerDirec"
  "tory:\0028\001\032T\n\023NetlistsByNameEntry\022\013\n\003key\030\001"
  " \001(\t\022,\n\005value\030\002 \001(\0132\035.Odb.Lib.Protobuf.N"
  "etlistFile:\0028\001B\007\n\005_nameB\007\n\005_pathB\016\n\014_eda"
  "datafileB\017\n\r_attrlistfileb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_stepdirectory_2eproto_deps[4] = {
  &::descriptor_table_attrlistfile_2eproto,
  &::descriptor_table_edadatafile_2eproto,
  &::descriptor_table_layerdirectory_2eproto,
  &::descriptor_table_netlistfile_2eproto,
};
static ::_pbi::once_flag descriptor_table_stepdirectory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stepdirectory_2eproto = {
    false, false, 673, descriptor_table_protodef_stepdirectory_2eproto,
    "stepdirectory.proto",
    &descriptor_table_stepdirectory_2eproto_once, descriptor_table_stepdirectory_2eproto_deps, 4, 3,
    schemas, file_default_instances, TableStruct_stepdirectory_2eproto::offsets,
    file_level_metadata_stepdirectory_2eproto, file_level_enum_descriptors_stepdirectory_2eproto,
    file_level_service_descriptors_stepdirectory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stepdirectory_2eproto_getter() {
  return &descriptor_table_stepdirectory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stepdirectory_2eproto(&descriptor_table_stepdirectory_2eproto);
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

StepDirectory_LayersByNameEntry_DoNotUse::StepDirectory_LayersByNameEntry_DoNotUse() {}
StepDirectory_LayersByNameEntry_DoNotUse::StepDirectory_LayersByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepDirectory_LayersByNameEntry_DoNotUse::MergeFrom(const StepDirectory_LayersByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepDirectory_LayersByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stepdirectory_2eproto_getter, &descriptor_table_stepdirectory_2eproto_once,
      file_level_metadata_stepdirectory_2eproto[0]);
}

// ===================================================================

StepDirectory_NetlistsByNameEntry_DoNotUse::StepDirectory_NetlistsByNameEntry_DoNotUse() {}
StepDirectory_NetlistsByNameEntry_DoNotUse::StepDirectory_NetlistsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepDirectory_NetlistsByNameEntry_DoNotUse::MergeFrom(const StepDirectory_NetlistsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepDirectory_NetlistsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stepdirectory_2eproto_getter, &descriptor_table_stepdirectory_2eproto_once,
      file_level_metadata_stepdirectory_2eproto[1]);
}

// ===================================================================

class StepDirectory::_Internal {
 public:
  using HasBits = decltype(std::declval<StepDirectory>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Odb::Lib::Protobuf::EdaDataFile& edadatafile(const StepDirectory* msg);
  static void set_has_edadatafile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Odb::Lib::Protobuf::AttrListFile& attrlistfile(const StepDirectory* msg);
  static void set_has_attrlistfile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Odb::Lib::Protobuf::EdaDataFile&
StepDirectory::_Internal::edadatafile(const StepDirectory* msg) {
  return *msg->_impl_.edadatafile_;
}
const ::Odb::Lib::Protobuf::AttrListFile&
StepDirectory::_Internal::attrlistfile(const StepDirectory* msg) {
  return *msg->_impl_.attrlistfile_;
}
void StepDirectory::clear_layersbyname() {
  _impl_.layersbyname_.Clear();
}
void StepDirectory::clear_netlistsbyname() {
  _impl_.netlistsbyname_.Clear();
}
void StepDirectory::clear_edadatafile() {
  if (_impl_.edadatafile_ != nullptr) _impl_.edadatafile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void StepDirectory::clear_attrlistfile() {
  if (_impl_.attrlistfile_ != nullptr) _impl_.attrlistfile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
StepDirectory::StepDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StepDirectory::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.StepDirectory)
}
StepDirectory::StepDirectory(const StepDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepDirectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.layersbyname_)*/{}
    , /*decltype(_impl_.netlistsbyname_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.edadatafile_){nullptr}
    , decltype(_impl_.attrlistfile_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.layersbyname_.MergeFrom(from._impl_.layersbyname_);
  _this->_impl_.netlistsbyname_.MergeFrom(from._impl_.netlistsbyname_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_edadatafile()) {
    _this->_impl_.edadatafile_ = new ::Odb::Lib::Protobuf::EdaDataFile(*from._impl_.edadatafile_);
  }
  if (from._internal_has_attrlistfile()) {
    _this->_impl_.attrlistfile_ = new ::Odb::Lib::Protobuf::AttrListFile(*from._impl_.attrlistfile_);
  }
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.StepDirectory)
}

inline void StepDirectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.layersbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.netlistsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.edadatafile_){nullptr}
    , decltype(_impl_.attrlistfile_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StepDirectory::~StepDirectory() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.StepDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StepDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layersbyname_.Destruct();
  _impl_.layersbyname_.~MapField();
  _impl_.netlistsbyname_.Destruct();
  _impl_.netlistsbyname_.~MapField();
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.edadatafile_;
  if (this != internal_default_instance()) delete _impl_.attrlistfile_;
}

void StepDirectory::ArenaDtor(void* object) {
  StepDirectory* _this = reinterpret_cast< StepDirectory* >(object);
  _this->_impl_.layersbyname_.Destruct();
  _this->_impl_.netlistsbyname_.Destruct();
}
void StepDirectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.StepDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layersbyname_.Clear();
  _impl_.netlistsbyname_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.edadatafile_ != nullptr);
      _impl_.edadatafile_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.attrlistfile_ != nullptr);
      _impl_.attrlistfile_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.StepDirectory.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.StepDirectory.path"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Odb.Lib.Protobuf.LayerDirectory> layersByName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.layersbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Odb.Lib.Protobuf.NetlistFile> netlistsByName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.netlistsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .Odb.Lib.Protobuf.EdaDataFile edadatafile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_edadatafile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Odb.Lib.Protobuf.AttrListFile attrlistfile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrlistfile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.StepDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.StepDirectory.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string path = 2;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.StepDirectory.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // map<string, .Odb.Lib.Protobuf.LayerDirectory> layersByName = 3;
  if (!this->_internal_layersbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::Odb::Lib::Protobuf::LayerDirectory>;
    using WireHelper = StepDirectory_LayersByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_layersbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.StepDirectory.LayersByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .Odb.Lib.Protobuf.NetlistFile> netlistsByName = 4;
  if (!this->_internal_netlistsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::Odb::Lib::Protobuf::NetlistFile>;
    using WireHelper = StepDirectory_NetlistsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_netlistsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.StepDirectory.NetlistsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .Odb.Lib.Protobuf.EdaDataFile edadatafile = 5;
  if (_internal_has_edadatafile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::edadatafile(this),
        _Internal::edadatafile(this).GetCachedSize(), target, stream);
  }

  // optional .Odb.Lib.Protobuf.AttrListFile attrlistfile = 6;
  if (_internal_has_attrlistfile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::attrlistfile(this),
        _Internal::attrlistfile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.StepDirectory)
  return target;
}

size_t StepDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.StepDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Odb.Lib.Protobuf.LayerDirectory> layersByName = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_layersbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >::const_iterator
      it = this->_internal_layersbyname().begin();
      it != this->_internal_layersbyname().end(); ++it) {
    total_size += StepDirectory_LayersByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Odb.Lib.Protobuf.NetlistFile> netlistsByName = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_netlistsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >::const_iterator
      it = this->_internal_netlistsbyname().begin();
      it != this->_internal_netlistsbyname().end(); ++it) {
    total_size += StepDirectory_NetlistsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional .Odb.Lib.Protobuf.EdaDataFile edadatafile = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.edadatafile_);
    }

    // optional .Odb.Lib.Protobuf.AttrListFile attrlistfile = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attrlistfile_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepDirectory::GetClassData() const { return &_class_data_; }


void StepDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepDirectory*>(&to_msg);
  auto& from = static_cast<const StepDirectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.StepDirectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layersbyname_.MergeFrom(from._impl_.layersbyname_);
  _this->_impl_.netlistsbyname_.MergeFrom(from._impl_.netlistsbyname_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_edadatafile()->::Odb::Lib::Protobuf::EdaDataFile::MergeFrom(
          from._internal_edadatafile());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_attrlistfile()->::Odb::Lib::Protobuf::AttrListFile::MergeFrom(
          from._internal_attrlistfile());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepDirectory::CopyFrom(const StepDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.StepDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepDirectory::IsInitialized() const {
  return true;
}

void StepDirectory::InternalSwap(StepDirectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layersbyname_.InternalSwap(&other->_impl_.layersbyname_);
  _impl_.netlistsbyname_.InternalSwap(&other->_impl_.netlistsbyname_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StepDirectory, _impl_.attrlistfile_)
      + sizeof(StepDirectory::_impl_.attrlistfile_)
      - PROTOBUF_FIELD_OFFSET(StepDirectory, _impl_.edadatafile_)>(
          reinterpret_cast<char*>(&_impl_.edadatafile_),
          reinterpret_cast<char*>(&other->_impl_.edadatafile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StepDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stepdirectory_2eproto_getter, &descriptor_table_stepdirectory_2eproto_once,
      file_level_metadata_stepdirectory_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::StepDirectory*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::StepDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::StepDirectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
