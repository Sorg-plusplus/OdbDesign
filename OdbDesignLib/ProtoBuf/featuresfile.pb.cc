// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featuresfile.proto

#include "featuresfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Odb {
namespace Lib {
namespace Protobuf {
PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contourpolygons_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeaturesFile_FeatureRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFile_FeatureRecordDefaultTypeInternal() {}
  union {
    FeaturesFile_FeatureRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFile_FeatureRecordDefaultTypeInternal _FeaturesFile_FeatureRecord_default_instance_;
PROTOBUF_CONSTEXPR FeaturesFile::FeaturesFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.featurerecords_)*/{}
  , /*decltype(_impl_.units_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.numfeatures_)*/0} {}
struct FeaturesFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFileDefaultTypeInternal() {}
  union {
    FeaturesFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFileDefaultTypeInternal _FeaturesFile_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
static ::_pb::Metadata file_level_metadata_featuresfile_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_featuresfile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_featuresfile_2eproto = nullptr;

const uint32_t TableStruct_featuresfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.contourpolygons_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.directory_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.numfeatures_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.featurerecords_),
  0,
  3,
  1,
  2,
  4,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord)},
  { 7, 19, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Odb::Lib::Protobuf::_FeaturesFile_FeatureRecord_default_instance_._instance,
  &::Odb::Lib::Protobuf::_FeaturesFile_default_instance_._instance,
};

const char descriptor_table_protodef_featuresfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022featuresfile.proto\022\020Odb.Lib.Protobuf\032\014"
  "common.proto\"\302\002\n\014FeaturesFile\022\022\n\005units\030\001"
  " \001(\tH\000\210\001\001\022\017\n\002id\030\002 \001(\rH\001\210\001\001\022\021\n\004path\030\005 \001(\t"
  "H\002\210\001\001\022\026\n\tdirectory\030\006 \001(\tH\003\210\001\001\022\030\n\013numFeat"
  "ures\030\007 \001(\005H\004\210\001\001\022D\n\016featureRecords\030\010 \003(\0132"
  ",.Odb.Lib.Protobuf.FeaturesFile.FeatureR"
  "ecord\032J\n\rFeatureRecord\0229\n\017contourPolygon"
  "s\030\001 \003(\0132 .Odb.Lib.Protobuf.ContourPolygo"
  "nB\010\n\006_unitsB\005\n\003_idB\007\n\005_pathB\014\n\n_director"
  "yB\016\n\014_numFeaturesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_featuresfile_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_featuresfile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_featuresfile_2eproto = {
    false, false, 385, descriptor_table_protodef_featuresfile_2eproto,
    "featuresfile.proto",
    &descriptor_table_featuresfile_2eproto_once, descriptor_table_featuresfile_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_featuresfile_2eproto::offsets,
    file_level_metadata_featuresfile_2eproto, file_level_enum_descriptors_featuresfile_2eproto,
    file_level_service_descriptors_featuresfile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_featuresfile_2eproto_getter() {
  return &descriptor_table_featuresfile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_featuresfile_2eproto(&descriptor_table_featuresfile_2eproto);
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class FeaturesFile_FeatureRecord::_Internal {
 public:
};

void FeaturesFile_FeatureRecord::clear_contourpolygons() {
  _impl_.contourpolygons_.Clear();
}
FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
}
FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(const FeaturesFile_FeatureRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeaturesFile_FeatureRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contourpolygons_){from._impl_.contourpolygons_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
}

inline void FeaturesFile_FeatureRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contourpolygons_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeaturesFile_FeatureRecord::~FeaturesFile_FeatureRecord() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeaturesFile_FeatureRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contourpolygons_.~RepeatedPtrField();
}

void FeaturesFile_FeatureRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeaturesFile_FeatureRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contourpolygons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturesFile_FeatureRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contourpolygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeaturesFile_FeatureRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contourpolygons_size()); i < n; i++) {
    const auto& repfield = this->_internal_contourpolygons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  return target;
}

size_t FeaturesFile_FeatureRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  total_size += 1UL * this->_internal_contourpolygons_size();
  for (const auto& msg : this->_impl_.contourpolygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeaturesFile_FeatureRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeaturesFile_FeatureRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeaturesFile_FeatureRecord::GetClassData() const { return &_class_data_; }


void FeaturesFile_FeatureRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeaturesFile_FeatureRecord*>(&to_msg);
  auto& from = static_cast<const FeaturesFile_FeatureRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contourpolygons_.MergeFrom(from._impl_.contourpolygons_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeaturesFile_FeatureRecord::CopyFrom(const FeaturesFile_FeatureRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesFile_FeatureRecord::IsInitialized() const {
  return true;
}

void FeaturesFile_FeatureRecord::InternalSwap(FeaturesFile_FeatureRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contourpolygons_.InternalSwap(&other->_impl_.contourpolygons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile_FeatureRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[0]);
}

// ===================================================================

class FeaturesFile::_Internal {
 public:
  using HasBits = decltype(std::declval<FeaturesFile>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numfeatures(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FeaturesFile::FeaturesFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.FeaturesFile)
}
FeaturesFile::FeaturesFile(const FeaturesFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeaturesFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featurerecords_){from._impl_.featurerecords_}
    , decltype(_impl_.units_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.numfeatures_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_units()) {
    _this->_impl_.units_.Set(from._internal_units(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    _this->_impl_.directory_.Set(from._internal_directory(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numfeatures_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.numfeatures_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.FeaturesFile)
}

inline void FeaturesFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featurerecords_){arena}
    , decltype(_impl_.units_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.numfeatures_){0}
  };
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeaturesFile::~FeaturesFile() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.FeaturesFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeaturesFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.featurerecords_.~RepeatedPtrField();
  _impl_.units_.Destroy();
  _impl_.path_.Destroy();
  _impl_.directory_.Destroy();
}

void FeaturesFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeaturesFile::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.FeaturesFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.featurerecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.directory_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numfeatures_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.numfeatures_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturesFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_units();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.units"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.path"));
        } else
          goto handle_unusual;
        continue;
      // optional string directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.directory"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 numFeatures = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_numfeatures(&has_bits);
          _impl_.numfeatures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featurerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeaturesFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.FeaturesFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string units = 1;
  if (_internal_has_units()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.units");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_units(), target);
  }

  // optional uint32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional string path = 5;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  // optional string directory = 6;
  if (_internal_has_directory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.directory");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_directory(), target);
  }

  // optional int32 numFeatures = 7;
  if (_internal_has_numfeatures()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_numfeatures(), target);
  }

  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_featurerecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_featurerecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.FeaturesFile)
  return target;
}

size_t FeaturesFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.FeaturesFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  total_size += 1UL * this->_internal_featurerecords_size();
  for (const auto& msg : this->_impl_.featurerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string units = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string directory = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional int32 numFeatures = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numfeatures());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeaturesFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeaturesFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeaturesFile::GetClassData() const { return &_class_data_; }


void FeaturesFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeaturesFile*>(&to_msg);
  auto& from = static_cast<const FeaturesFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.FeaturesFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.featurerecords_.MergeFrom(from._impl_.featurerecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.numfeatures_ = from._impl_.numfeatures_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeaturesFile::CopyFrom(const FeaturesFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.FeaturesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesFile::IsInitialized() const {
  return true;
}

void FeaturesFile::InternalSwap(FeaturesFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.featurerecords_.InternalSwap(&other->_impl_.featurerecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.units_, lhs_arena,
      &other->_impl_.units_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_, lhs_arena,
      &other->_impl_.directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeaturesFile, _impl_.numfeatures_)
      + sizeof(FeaturesFile::_impl_.numfeatures_)
      - PROTOBUF_FIELD_OFFSET(FeaturesFile, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
