// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featuresfile.proto

#include "featuresfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Odb {
namespace Lib {
namespace Protobuf {
PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal _FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contourpolygons_)*/{}
  , /*decltype(_impl_.attributelookuptable_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.xs_)*/0
  , /*decltype(_impl_.ys_)*/0
  , /*decltype(_impl_.xe_)*/0
  , /*decltype(_impl_.ye_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.apt_def_)*/0
  , /*decltype(_impl_.apt_def_symbol_num_)*/0
  , /*decltype(_impl_.apt_def_resize_factor_)*/0
  , /*decltype(_impl_.xc_)*/0
  , /*decltype(_impl_.yc_)*/0
  , /*decltype(_impl_.cw_)*/false
  , /*decltype(_impl_.xsize_)*/0
  , /*decltype(_impl_.ysize_)*/0
  , /*decltype(_impl_.width_factor_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.sym_num_)*/0
  , /*decltype(_impl_.polarity_)*/0
  , /*decltype(_impl_.dcode_)*/0
  , /*decltype(_impl_.atr_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.orient_def_)*/0
  , /*decltype(_impl_.orient_def_rotation_)*/0} {}
struct FeaturesFile_FeatureRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFile_FeatureRecordDefaultTypeInternal() {}
  union {
    FeaturesFile_FeatureRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFile_FeatureRecordDefaultTypeInternal _FeaturesFile_FeatureRecord_default_instance_;
PROTOBUF_CONSTEXPR FeaturesFile_SymbolNamesByNameEntry_DoNotUse::FeaturesFile_SymbolNamesByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FeaturesFile_SymbolNamesByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal _FeaturesFile_SymbolNamesByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FeaturesFile::FeaturesFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.featurerecords_)*/{}
  , /*decltype(_impl_.symbolnamesbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.units_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.numfeatures_)*/0} {}
struct FeaturesFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesFileDefaultTypeInternal() {}
  union {
    FeaturesFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesFileDefaultTypeInternal _FeaturesFile_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
static ::_pb::Metadata file_level_metadata_featuresfile_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_featuresfile_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_featuresfile_2eproto = nullptr;

const uint32_t TableStruct_featuresfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.xs_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.ys_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.xe_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.ye_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.apt_def_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.apt_def_symbol_num_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.apt_def_resize_factor_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.xc_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.yc_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.cw_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.xsize_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.ysize_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.width_factor_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.sym_num_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.polarity_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.dcode_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.atr_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.orient_def_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.orient_def_rotation_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.contourpolygons_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord, _impl_.attributelookuptable_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  16,
  17,
  18,
  1,
  19,
  20,
  21,
  22,
  23,
  2,
  24,
  25,
  26,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.directory_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.numfeatures_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.featurerecords_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::FeaturesFile, _impl_.symbolnamesbyname_),
  0,
  3,
  1,
  2,
  4,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse)},
  { 10, 45, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord)},
  { 74, 82, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse)},
  { 84, 97, -1, sizeof(::Odb::Lib::Protobuf::FeaturesFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Odb::Lib::Protobuf::_FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_FeaturesFile_FeatureRecord_default_instance_._instance,
  &::Odb::Lib::Protobuf::_FeaturesFile_SymbolNamesByNameEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_FeaturesFile_default_instance_._instance,
};

const char descriptor_table_protodef_featuresfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022featuresfile.proto\022\020Odb.Lib.Protobuf\032\014"
  "common.proto\032\013enums.proto\032\020symbolname.pr"
  "oto\"\207\r\n\014FeaturesFile\022\022\n\005units\030\001 \001(\tH\000\210\001\001"
  "\022\017\n\002id\030\002 \001(\rH\001\210\001\001\022\021\n\004path\030\005 \001(\tH\002\210\001\001\022\026\n\t"
  "directory\030\006 \001(\tH\003\210\001\001\022\030\n\013numFeatures\030\007 \001("
  "\005H\004\210\001\001\022D\n\016featureRecords\030\010 \003(\0132,.Odb.Lib"
  ".Protobuf.FeaturesFile.FeatureRecord\022P\n\021"
  "symbolNamesByName\030\t \003(\01325.Odb.Lib.Protob"
  "uf.FeaturesFile.SymbolNamesByNameEntry\032\344"
  "\t\n\rFeatureRecord\022D\n\004type\030\002 \001(\01621.Odb.Lib"
  ".Protobuf.FeaturesFile.FeatureRecord.Typ"
  "eH\000\210\001\001\022\017\n\002xs\030\003 \001(\002H\001\210\001\001\022\017\n\002ys\030\004 \001(\002H\002\210\001\001"
  "\022\017\n\002xe\030\005 \001(\002H\003\210\001\001\022\017\n\002ye\030\006 \001(\002H\004\210\001\001\022\016\n\001x\030"
  "\007 \001(\002H\005\210\001\001\022\016\n\001y\030\010 \001(\002H\006\210\001\001\022\024\n\007apt_def\030\t "
  "\001(\005H\007\210\001\001\022\037\n\022apt_def_symbol_num\030\n \001(\005H\010\210\001"
  "\001\022\"\n\025apt_def_resize_factor\030\013 \001(\002H\t\210\001\001\022\017\n"
  "\002xc\030\014 \001(\002H\n\210\001\001\022\017\n\002yc\030\r \001(\002H\013\210\001\001\022\017\n\002cw\030\016 "
  "\001(\010H\014\210\001\001\022\021\n\004font\030\017 \001(\tH\r\210\001\001\022\022\n\005xsize\030\020 \001"
  "(\002H\016\210\001\001\022\022\n\005ysize\030\021 \001(\002H\017\210\001\001\022\031\n\014width_fac"
  "tor\030\022 \001(\002H\020\210\001\001\022\021\n\004text\030\023 \001(\tH\021\210\001\001\022\024\n\007ver"
  "sion\030\024 \001(\005H\022\210\001\001\022\024\n\007sym_num\030\025 \001(\005H\023\210\001\001\0221\n"
  "\010polarity\030\026 \001(\0162\032.Odb.Lib.Protobuf.Polar"
  "ityH\024\210\001\001\022\022\n\005dcode\030\027 \001(\005H\025\210\001\001\022\020\n\003atr\030\030 \001("
  "\005H\026\210\001\001\022\022\n\005value\030\031 \001(\tH\027\210\001\001\022\017\n\002id\030\032 \001(\rH\030"
  "\210\001\001\022\027\n\norient_def\030\033 \001(\005H\031\210\001\001\022 \n\023orient_d"
  "ef_rotation\030\034 \001(\002H\032\210\001\001\0229\n\017contourPolygon"
  "s\030\001 \003(\0132 .Odb.Lib.Protobuf.ContourPolygo"
  "n\022d\n\024attributeLookupTable\030\035 \003(\0132F.Odb.Li"
  "b.Protobuf.FeaturesFile.FeatureRecord.At"
  "tributeLookupTableEntry\032;\n\031AttributeLook"
  "upTableEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\"F\n\004Type\022\007\n\003Arc\020\000\022\007\n\003Pad\020\001\022\013\n\007Surfac"
  "e\020\002\022\013\n\007Barcode\020\003\022\010\n\004Text\020\004\022\010\n\004Line\020\005B\007\n\005"
  "_typeB\005\n\003_xsB\005\n\003_ysB\005\n\003_xeB\005\n\003_yeB\004\n\002_xB"
  "\004\n\002_yB\n\n\010_apt_defB\025\n\023_apt_def_symbol_num"
  "B\030\n\026_apt_def_resize_factorB\005\n\003_xcB\005\n\003_yc"
  "B\005\n\003_cwB\007\n\005_fontB\010\n\006_xsizeB\010\n\006_ysizeB\017\n\r"
  "_width_factorB\007\n\005_textB\n\n\010_versionB\n\n\010_s"
  "ym_numB\013\n\t_polarityB\010\n\006_dcodeB\006\n\004_atrB\010\n"
  "\006_valueB\005\n\003_idB\r\n\013_orient_defB\026\n\024_orient"
  "_def_rotation\032V\n\026SymbolNamesByNameEntry\022"
  "\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.Odb.Lib.Pr"
  "otobuf.SymbolName:\0028\001B\010\n\006_unitsB\005\n\003_idB\007"
  "\n\005_pathB\014\n\n_directoryB\016\n\014_numFeaturesb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_featuresfile_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_symbolname_2eproto,
};
static ::_pbi::once_flag descriptor_table_featuresfile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_featuresfile_2eproto = {
    false, false, 1765, descriptor_table_protodef_featuresfile_2eproto,
    "featuresfile.proto",
    &descriptor_table_featuresfile_2eproto_once, descriptor_table_featuresfile_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_featuresfile_2eproto::offsets,
    file_level_metadata_featuresfile_2eproto, file_level_enum_descriptors_featuresfile_2eproto,
    file_level_service_descriptors_featuresfile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_featuresfile_2eproto_getter() {
  return &descriptor_table_featuresfile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_featuresfile_2eproto(&descriptor_table_featuresfile_2eproto);
namespace Odb {
namespace Lib {
namespace Protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeaturesFile_FeatureRecord_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_featuresfile_2eproto);
  return file_level_enum_descriptors_featuresfile_2eproto[0];
}
bool FeaturesFile_FeatureRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Arc;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Pad;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Surface;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Barcode;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Text;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Line;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Type_MIN;
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::Type_MAX;
constexpr int FeaturesFile_FeatureRecord::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse() {}
FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::MergeFrom(const FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[0]);
}

// ===================================================================

class FeaturesFile_FeatureRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<FeaturesFile_FeatureRecord>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ys(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_xe(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ye(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_apt_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_apt_def_symbol_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_apt_def_resize_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_xc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_yc(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cw(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xsize(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ysize(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_width_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sym_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_polarity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_atr(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_orient_def(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_orient_def_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

void FeaturesFile_FeatureRecord::clear_contourpolygons() {
  _impl_.contourpolygons_.Clear();
}
FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FeaturesFile_FeatureRecord::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
}
FeaturesFile_FeatureRecord::FeaturesFile_FeatureRecord(const FeaturesFile_FeatureRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeaturesFile_FeatureRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contourpolygons_){from._impl_.contourpolygons_}
    , /*decltype(_impl_.attributelookuptable_)*/{}
    , decltype(_impl_.font_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.xs_){}
    , decltype(_impl_.ys_){}
    , decltype(_impl_.xe_){}
    , decltype(_impl_.ye_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.apt_def_){}
    , decltype(_impl_.apt_def_symbol_num_){}
    , decltype(_impl_.apt_def_resize_factor_){}
    , decltype(_impl_.xc_){}
    , decltype(_impl_.yc_){}
    , decltype(_impl_.cw_){}
    , decltype(_impl_.xsize_){}
    , decltype(_impl_.ysize_){}
    , decltype(_impl_.width_factor_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.sym_num_){}
    , decltype(_impl_.polarity_){}
    , decltype(_impl_.dcode_){}
    , decltype(_impl_.atr_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.orient_def_){}
    , decltype(_impl_.orient_def_rotation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributelookuptable_.MergeFrom(from._impl_.attributelookuptable_);
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font()) {
    _this->_impl_.font_.Set(from._internal_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orient_def_rotation_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.orient_def_rotation_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
}

inline void FeaturesFile_FeatureRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contourpolygons_){arena}
    , /*decltype(_impl_.attributelookuptable_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.font_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.xs_){0}
    , decltype(_impl_.ys_){0}
    , decltype(_impl_.xe_){0}
    , decltype(_impl_.ye_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.apt_def_){0}
    , decltype(_impl_.apt_def_symbol_num_){0}
    , decltype(_impl_.apt_def_resize_factor_){0}
    , decltype(_impl_.xc_){0}
    , decltype(_impl_.yc_){0}
    , decltype(_impl_.cw_){false}
    , decltype(_impl_.xsize_){0}
    , decltype(_impl_.ysize_){0}
    , decltype(_impl_.width_factor_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.sym_num_){0}
    , decltype(_impl_.polarity_){0}
    , decltype(_impl_.dcode_){0}
    , decltype(_impl_.atr_){0}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.orient_def_){0}
    , decltype(_impl_.orient_def_rotation_){0}
  };
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeaturesFile_FeatureRecord::~FeaturesFile_FeatureRecord() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FeaturesFile_FeatureRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contourpolygons_.~RepeatedPtrField();
  _impl_.attributelookuptable_.Destruct();
  _impl_.attributelookuptable_.~MapField();
  _impl_.font_.Destroy();
  _impl_.text_.Destroy();
  _impl_.value_.Destroy();
}

void FeaturesFile_FeatureRecord::ArenaDtor(void* object) {
  FeaturesFile_FeatureRecord* _this = reinterpret_cast< FeaturesFile_FeatureRecord* >(object);
  _this->_impl_.attributelookuptable_.Destruct();
}
void FeaturesFile_FeatureRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeaturesFile_FeatureRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contourpolygons_.Clear();
  _impl_.attributelookuptable_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.font_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ye_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ye_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cw_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.cw_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.xsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.atr_) -
        reinterpret_cast<char*>(&_impl_.xsize_)) + sizeof(_impl_.atr_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.orient_def_rotation_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.orient_def_rotation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturesFile_FeatureRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contourpolygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional float xs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xs(&has_bits);
          _impl_.xs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_ys(&has_bits);
          _impl_.ys_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_xe(&has_bits);
          _impl_.xe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ye = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_ye(&has_bits);
          _impl_.ye_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 apt_def = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_apt_def(&has_bits);
          _impl_.apt_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 apt_def_symbol_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_apt_def_symbol_num(&has_bits);
          _impl_.apt_def_symbol_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float apt_def_resize_factor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_apt_def_resize_factor(&has_bits);
          _impl_.apt_def_resize_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_xc(&has_bits);
          _impl_.xc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_yc(&has_bits);
          _impl_.yc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool cw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_cw(&has_bits);
          _impl_.cw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string font = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font"));
        } else
          goto handle_unusual;
        continue;
      // optional float xsize = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_xsize(&has_bits);
          _impl_.xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ysize = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_ysize(&has_bits);
          _impl_.ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float width_factor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_width_factor(&has_bits);
          _impl_.width_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sym_num = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_sym_num(&has_bits);
          _impl_.sym_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Odb.Lib.Protobuf.Polarity polarity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_polarity(static_cast<::Odb::Lib::Protobuf::Polarity>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 dcode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_dcode(&has_bits);
          _impl_.dcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 atr = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_atr(&has_bits);
          _impl_.atr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 orient_def = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_orient_def(&has_bits);
          _impl_.orient_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float orient_def_rotation = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_orient_def_rotation(&has_bits);
          _impl_.orient_def_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> attributeLookupTable = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.attributelookuptable_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeaturesFile_FeatureRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contourpolygons_size()); i < n; i++) {
    const auto& repfield = this->_internal_contourpolygons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.Type type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional float xs = 3;
  if (_internal_has_xs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xs(), target);
  }

  // optional float ys = 4;
  if (_internal_has_ys()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ys(), target);
  }

  // optional float xe = 5;
  if (_internal_has_xe()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_xe(), target);
  }

  // optional float ye = 6;
  if (_internal_has_ye()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ye(), target);
  }

  // optional float x = 7;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_x(), target);
  }

  // optional float y = 8;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_y(), target);
  }

  // optional int32 apt_def = 9;
  if (_internal_has_apt_def()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_apt_def(), target);
  }

  // optional int32 apt_def_symbol_num = 10;
  if (_internal_has_apt_def_symbol_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_apt_def_symbol_num(), target);
  }

  // optional float apt_def_resize_factor = 11;
  if (_internal_has_apt_def_resize_factor()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_apt_def_resize_factor(), target);
  }

  // optional float xc = 12;
  if (_internal_has_xc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_xc(), target);
  }

  // optional float yc = 13;
  if (_internal_has_yc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_yc(), target);
  }

  // optional bool cw = 14;
  if (_internal_has_cw()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_cw(), target);
  }

  // optional string font = 15;
  if (_internal_has_font()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font().data(), static_cast<int>(this->_internal_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_font(), target);
  }

  // optional float xsize = 16;
  if (_internal_has_xsize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_xsize(), target);
  }

  // optional float ysize = 17;
  if (_internal_has_ysize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_ysize(), target);
  }

  // optional float width_factor = 18;
  if (_internal_has_width_factor()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_width_factor(), target);
  }

  // optional string text = 19;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_text(), target);
  }

  // optional int32 version = 20;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_version(), target);
  }

  // optional int32 sym_num = 21;
  if (_internal_has_sym_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_sym_num(), target);
  }

  // optional .Odb.Lib.Protobuf.Polarity polarity = 22;
  if (_internal_has_polarity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_polarity(), target);
  }

  // optional int32 dcode = 23;
  if (_internal_has_dcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_dcode(), target);
  }

  // optional int32 atr = 24;
  if (_internal_has_atr()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_atr(), target);
  }

  // optional string value = 25;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_value(), target);
  }

  // optional uint32 id = 26;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_id(), target);
  }

  // optional int32 orient_def = 27;
  if (_internal_has_orient_def()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_orient_def(), target);
  }

  // optional float orient_def_rotation = 28;
  if (_internal_has_orient_def_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_orient_def_rotation(), target);
  }

  // map<string, string> attributeLookupTable = 29;
  if (!this->_internal_attributelookuptable().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributelookuptable();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.AttributeLookupTableEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.AttributeLookupTableEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(29, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(29, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  return target;
}

size_t FeaturesFile_FeatureRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  total_size += 1UL * this->_internal_contourpolygons_size();
  for (const auto& msg : this->_impl_.contourpolygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> attributeLookupTable = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributelookuptable_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributelookuptable().begin();
      it != this->_internal_attributelookuptable().end(); ++it) {
    total_size += FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string font = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font());
    }

    // optional string text = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string value = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.Type type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float xs = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float ys = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float xe = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float ye = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float x = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 apt_def = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apt_def());
    }

    // optional int32 apt_def_symbol_num = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apt_def_symbol_num());
    }

    // optional float apt_def_resize_factor = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float xc = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float yc = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool cw = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float xsize = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float ysize = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float width_factor = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 version = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional int32 sym_num = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_sym_num());
    }

    // optional .Odb.Lib.Protobuf.Polarity polarity = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_polarity());
    }

    // optional int32 dcode = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dcode());
    }

    // optional int32 atr = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_atr());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 id = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional int32 orient_def = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_orient_def());
    }

    // optional float orient_def_rotation = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeaturesFile_FeatureRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeaturesFile_FeatureRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeaturesFile_FeatureRecord::GetClassData() const { return &_class_data_; }


void FeaturesFile_FeatureRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeaturesFile_FeatureRecord*>(&to_msg);
  auto& from = static_cast<const FeaturesFile_FeatureRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contourpolygons_.MergeFrom(from._impl_.contourpolygons_);
  _this->_impl_.attributelookuptable_.MergeFrom(from._impl_.attributelookuptable_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_font(from._internal_font());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.xs_ = from._impl_.xs_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ys_ = from._impl_.ys_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.xe_ = from._impl_.xe_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ye_ = from._impl_.ye_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.apt_def_ = from._impl_.apt_def_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.apt_def_symbol_num_ = from._impl_.apt_def_symbol_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.apt_def_resize_factor_ = from._impl_.apt_def_resize_factor_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.xc_ = from._impl_.xc_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.yc_ = from._impl_.yc_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cw_ = from._impl_.cw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.xsize_ = from._impl_.xsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ysize_ = from._impl_.ysize_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.width_factor_ = from._impl_.width_factor_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.sym_num_ = from._impl_.sym_num_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.polarity_ = from._impl_.polarity_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.dcode_ = from._impl_.dcode_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.atr_ = from._impl_.atr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.orient_def_ = from._impl_.orient_def_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.orient_def_rotation_ = from._impl_.orient_def_rotation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeaturesFile_FeatureRecord::CopyFrom(const FeaturesFile_FeatureRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesFile_FeatureRecord::IsInitialized() const {
  return true;
}

void FeaturesFile_FeatureRecord::InternalSwap(FeaturesFile_FeatureRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contourpolygons_.InternalSwap(&other->_impl_.contourpolygons_);
  _impl_.attributelookuptable_.InternalSwap(&other->_impl_.attributelookuptable_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_, lhs_arena,
      &other->_impl_.font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeaturesFile_FeatureRecord, _impl_.orient_def_rotation_)
      + sizeof(FeaturesFile_FeatureRecord::_impl_.orient_def_rotation_)
      - PROTOBUF_FIELD_OFFSET(FeaturesFile_FeatureRecord, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile_FeatureRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[1]);
}

// ===================================================================

FeaturesFile_SymbolNamesByNameEntry_DoNotUse::FeaturesFile_SymbolNamesByNameEntry_DoNotUse() {}
FeaturesFile_SymbolNamesByNameEntry_DoNotUse::FeaturesFile_SymbolNamesByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FeaturesFile_SymbolNamesByNameEntry_DoNotUse::MergeFrom(const FeaturesFile_SymbolNamesByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile_SymbolNamesByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[2]);
}

// ===================================================================

class FeaturesFile::_Internal {
 public:
  using HasBits = decltype(std::declval<FeaturesFile>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numfeatures(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void FeaturesFile::clear_symbolnamesbyname() {
  _impl_.symbolnamesbyname_.Clear();
}
FeaturesFile::FeaturesFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FeaturesFile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.FeaturesFile)
}
FeaturesFile::FeaturesFile(const FeaturesFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeaturesFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featurerecords_){from._impl_.featurerecords_}
    , /*decltype(_impl_.symbolnamesbyname_)*/{}
    , decltype(_impl_.units_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.numfeatures_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.symbolnamesbyname_.MergeFrom(from._impl_.symbolnamesbyname_);
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_units()) {
    _this->_impl_.units_.Set(from._internal_units(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    _this->_impl_.directory_.Set(from._internal_directory(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numfeatures_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.numfeatures_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.FeaturesFile)
}

inline void FeaturesFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featurerecords_){arena}
    , /*decltype(_impl_.symbolnamesbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.units_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.numfeatures_){0}
  };
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeaturesFile::~FeaturesFile() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.FeaturesFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FeaturesFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.featurerecords_.~RepeatedPtrField();
  _impl_.symbolnamesbyname_.Destruct();
  _impl_.symbolnamesbyname_.~MapField();
  _impl_.units_.Destroy();
  _impl_.path_.Destroy();
  _impl_.directory_.Destroy();
}

void FeaturesFile::ArenaDtor(void* object) {
  FeaturesFile* _this = reinterpret_cast< FeaturesFile* >(object);
  _this->_impl_.symbolnamesbyname_.Destruct();
}
void FeaturesFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeaturesFile::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.FeaturesFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.featurerecords_.Clear();
  _impl_.symbolnamesbyname_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.directory_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numfeatures_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.numfeatures_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturesFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_units();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.units"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.path"));
        } else
          goto handle_unusual;
        continue;
      // optional string directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.FeaturesFile.directory"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 numFeatures = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_numfeatures(&has_bits);
          _impl_.numfeatures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featurerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Odb.Lib.Protobuf.SymbolName> symbolNamesByName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.symbolnamesbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeaturesFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.FeaturesFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string units = 1;
  if (_internal_has_units()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.units");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_units(), target);
  }

  // optional uint32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional string path = 5;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  // optional string directory = 6;
  if (_internal_has_directory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.FeaturesFile.directory");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_directory(), target);
  }

  // optional int32 numFeatures = 7;
  if (_internal_has_numfeatures()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_numfeatures(), target);
  }

  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_featurerecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_featurerecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .Odb.Lib.Protobuf.SymbolName> symbolNamesByName = 9;
  if (!this->_internal_symbolnamesbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>;
    using WireHelper = FeaturesFile_SymbolNamesByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_symbolnamesbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.FeaturesFile.SymbolNamesByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.FeaturesFile)
  return target;
}

size_t FeaturesFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.FeaturesFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  total_size += 1UL * this->_internal_featurerecords_size();
  for (const auto& msg : this->_impl_.featurerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .Odb.Lib.Protobuf.SymbolName> symbolNamesByName = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_symbolnamesbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolName >::const_iterator
      it = this->_internal_symbolnamesbyname().begin();
      it != this->_internal_symbolnamesbyname().end(); ++it) {
    total_size += FeaturesFile_SymbolNamesByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string units = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string directory = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional int32 numFeatures = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numfeatures());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeaturesFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeaturesFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeaturesFile::GetClassData() const { return &_class_data_; }


void FeaturesFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeaturesFile*>(&to_msg);
  auto& from = static_cast<const FeaturesFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.FeaturesFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.featurerecords_.MergeFrom(from._impl_.featurerecords_);
  _this->_impl_.symbolnamesbyname_.MergeFrom(from._impl_.symbolnamesbyname_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.numfeatures_ = from._impl_.numfeatures_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeaturesFile::CopyFrom(const FeaturesFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.FeaturesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesFile::IsInitialized() const {
  return true;
}

void FeaturesFile::InternalSwap(FeaturesFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.featurerecords_.InternalSwap(&other->_impl_.featurerecords_);
  _impl_.symbolnamesbyname_.InternalSwap(&other->_impl_.symbolnamesbyname_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.units_, lhs_arena,
      &other->_impl_.units_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_, lhs_arena,
      &other->_impl_.directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeaturesFile, _impl_.numfeatures_)
      + sizeof(FeaturesFile::_impl_.numfeatures_)
      - PROTOBUF_FIELD_OFFSET(FeaturesFile, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturesFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_featuresfile_2eproto_getter, &descriptor_table_featuresfile_2eproto_once,
      file_level_metadata_featuresfile_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile_SymbolNamesByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::FeaturesFile*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::FeaturesFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::FeaturesFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
