// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: componentsfile.proto

#include "componentsfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Odb {
namespace Lib {
namespace Protobuf {
PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord_ToeprintRecord::ComponentsFile_ComponentRecord_ToeprintRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pinnumber_)*/0u
  , /*decltype(_impl_.locationx_)*/0
  , /*decltype(_impl_.locationy_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.netnumber_)*/0u
  , /*decltype(_impl_.subnetnumber_)*/0u} {}
struct ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal() {}
  union {
    ComponentsFile_ComponentRecord_ToeprintRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal _ComponentsFile_ComponentRecord_ToeprintRecord_default_instance_;
PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord::ComponentsFile_ComponentRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.propertyrecords_)*/{}
  , /*decltype(_impl_.toeprintrecords_)*/{}
  , /*decltype(_impl_.compname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pkgref_)*/0u
  , /*decltype(_impl_.locationx_)*/0
  , /*decltype(_impl_.locationy_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.index_)*/0u} {}
struct ComponentsFile_ComponentRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentsFile_ComponentRecordDefaultTypeInternal() {}
  union {
    ComponentsFile_ComponentRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentsFile_ComponentRecordDefaultTypeInternal _ComponentsFile_ComponentRecord_default_instance_;
PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComponentsFile_ComponentRecordsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal _ComponentsFile_ComponentRecordsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComponentsFile_PropertyRecordsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal _ComponentsFile_PropertyRecordsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ComponentsFile::ComponentsFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributenames_)*/{}
  , /*decltype(_impl_.attributetextvalues_)*/{}
  , /*decltype(_impl_.componentrecords_)*/{}
  , /*decltype(_impl_.componentrecordsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.propertyrecords_)*/{}
  , /*decltype(_impl_.propertyrecordsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.units_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.side_)*/0} {}
struct ComponentsFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentsFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentsFileDefaultTypeInternal() {}
  union {
    ComponentsFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentsFileDefaultTypeInternal _ComponentsFile_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
static ::_pb::Metadata file_level_metadata_componentsfile_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_componentsfile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_componentsfile_2eproto = nullptr;

const uint32_t TableStruct_componentsfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.pinnumber_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.locationx_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.locationy_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.netnumber_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.subnetnumber_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.pkgref_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.locationx_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.locationy_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.compname_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.partname_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.propertyrecords_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord, _impl_.toeprintrecords_),
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.layername_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.directory_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.attributenames_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.attributetextvalues_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.componentrecords_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.componentrecordsbyname_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.propertyrecords_),
  PROTOBUF_FIELD_OFFSET(::Odb::Lib::Protobuf::ComponentsFile, _impl_.propertyrecordsbyname_),
  0,
  4,
  5,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord)},
  { 22, 40, -1, sizeof(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord)},
  { 52, 60, -1, sizeof(::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse)},
  { 62, 70, -1, sizeof(::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse)},
  { 72, 90, -1, sizeof(::Odb::Lib::Protobuf::ComponentsFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Odb::Lib::Protobuf::_ComponentsFile_ComponentRecord_ToeprintRecord_default_instance_._instance,
  &::Odb::Lib::Protobuf::_ComponentsFile_ComponentRecord_default_instance_._instance,
  &::Odb::Lib::Protobuf::_ComponentsFile_ComponentRecordsByNameEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_ComponentsFile_PropertyRecordsByNameEntry_DoNotUse_default_instance_._instance,
  &::Odb::Lib::Protobuf::_ComponentsFile_default_instance_._instance,
};

const char descriptor_table_protodef_componentsfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024componentsfile.proto\022\020Odb.Lib.Protobuf"
  "\032\014common.proto\032\013enums.proto\"\344\014\n\016Componen"
  "tsFile\022\022\n\005units\030\001 \001(\tH\000\210\001\001\022\017\n\002id\030\002 \001(\rH\001"
  "\210\001\001\022.\n\004side\030\003 \001(\0162\033.Odb.Lib.Protobuf.Boa"
  "rdSideH\002\210\001\001\022\026\n\tlayerName\030\004 \001(\tH\003\210\001\001\022\021\n\004p"
  "ath\030\005 \001(\tH\004\210\001\001\022\026\n\tdirectory\030\006 \001(\tH\005\210\001\001\022\026"
  "\n\016attributeNames\030\007 \003(\t\022\033\n\023attributeTextV"
  "alues\030\010 \003(\t\022J\n\020componentRecords\030\t \003(\01320."
  "Odb.Lib.Protobuf.ComponentsFile.Componen"
  "tRecord\022\\\n\026componentRecordsByName\030\n \003(\0132"
  "<.Odb.Lib.Protobuf.ComponentsFile.Compon"
  "entRecordsByNameEntry\0229\n\017propertyRecords"
  "\030\013 \003(\0132 .Odb.Lib.Protobuf.PropertyRecord"
  "\022Z\n\025propertyRecordsByName\030\014 \003(\0132;.Odb.Li"
  "b.Protobuf.ComponentsFile.PropertyRecord"
  "sByNameEntry\032\263\006\n\017ComponentRecord\022\023\n\006pkgR"
  "ef\030\001 \001(\rH\000\210\001\001\022\026\n\tlocationX\030\002 \001(\002H\001\210\001\001\022\026\n"
  "\tlocationY\030\003 \001(\002H\002\210\001\001\022\025\n\010rotation\030\004 \001(\002H"
  "\003\210\001\001\022\023\n\006mirror\030\005 \001(\010H\004\210\001\001\022\025\n\010compName\030\006 "
  "\001(\tH\005\210\001\001\022\025\n\010partName\030\007 \001(\tH\006\210\001\001\022\027\n\nattri"
  "butes\030\010 \001(\tH\007\210\001\001\022\017\n\002id\030\t \001(\rH\010\210\001\001\022\022\n\005ind"
  "ex\030\n \001(\rH\t\210\001\001\0229\n\017propertyRecords\030\013 \003(\0132 "
  ".Odb.Lib.Protobuf.PropertyRecord\022X\n\017toep"
  "rintRecords\030\014 \003(\0132\?.Odb.Lib.Protobuf.Com"
  "ponentsFile.ComponentRecord.ToeprintReco"
  "rd\032\264\002\n\016ToeprintRecord\022\026\n\tpinNumber\030\001 \001(\r"
  "H\000\210\001\001\022\026\n\tlocationX\030\002 \001(\002H\001\210\001\001\022\026\n\tlocatio"
  "nY\030\003 \001(\002H\002\210\001\001\022\025\n\010rotation\030\004 \001(\002H\003\210\001\001\022\023\n\006"
  "mirror\030\005 \001(\010H\004\210\001\001\022\026\n\tnetNumber\030\006 \001(\rH\005\210\001"
  "\001\022\031\n\014subnetNumber\030\007 \001(\rH\006\210\001\001\022\021\n\004name\030\010 \001"
  "(\tH\007\210\001\001B\014\n\n_pinNumberB\014\n\n_locationXB\014\n\n_"
  "locationYB\013\n\t_rotationB\t\n\007_mirrorB\014\n\n_ne"
  "tNumberB\017\n\r_subnetNumberB\007\n\005_nameB\t\n\007_pk"
  "gRefB\014\n\n_locationXB\014\n\n_locationYB\013\n\t_rot"
  "ationB\t\n\007_mirrorB\013\n\t_compNameB\013\n\t_partNa"
  "meB\r\n\013_attributesB\005\n\003_idB\010\n\006_index\032o\n\033Co"
  "mponentRecordsByNameEntry\022\013\n\003key\030\001 \001(\t\022\?"
  "\n\005value\030\002 \001(\01320.Odb.Lib.Protobuf.Compone"
  "ntsFile.ComponentRecord:\0028\001\032^\n\032PropertyR"
  "ecordsByNameEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030"
  "\002 \001(\0132 .Odb.Lib.Protobuf.PropertyRecord:"
  "\0028\001B\010\n\006_unitsB\005\n\003_idB\007\n\005_sideB\014\n\n_layerN"
  "ameB\007\n\005_pathB\014\n\n_directoryb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_componentsfile_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_enums_2eproto,
};
static ::_pbi::once_flag descriptor_table_componentsfile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_componentsfile_2eproto = {
    false, false, 1714, descriptor_table_protodef_componentsfile_2eproto,
    "componentsfile.proto",
    &descriptor_table_componentsfile_2eproto_once, descriptor_table_componentsfile_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_componentsfile_2eproto::offsets,
    file_level_metadata_componentsfile_2eproto, file_level_enum_descriptors_componentsfile_2eproto,
    file_level_service_descriptors_componentsfile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_componentsfile_2eproto_getter() {
  return &descriptor_table_componentsfile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_componentsfile_2eproto(&descriptor_table_componentsfile_2eproto);
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class ComponentsFile_ComponentRecord_ToeprintRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentsFile_ComponentRecord_ToeprintRecord>()._impl_._has_bits_);
  static void set_has_pinnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_locationx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_locationy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_netnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_subnetnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ComponentsFile_ComponentRecord_ToeprintRecord::ComponentsFile_ComponentRecord_ToeprintRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
}
ComponentsFile_ComponentRecord_ToeprintRecord::ComponentsFile_ComponentRecord_ToeprintRecord(const ComponentsFile_ComponentRecord_ToeprintRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentsFile_ComponentRecord_ToeprintRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pinnumber_){}
    , decltype(_impl_.locationx_){}
    , decltype(_impl_.locationy_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.netnumber_){}
    , decltype(_impl_.subnetnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pinnumber_, &from._impl_.pinnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subnetnumber_) -
    reinterpret_cast<char*>(&_impl_.pinnumber_)) + sizeof(_impl_.subnetnumber_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
}

inline void ComponentsFile_ComponentRecord_ToeprintRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pinnumber_){0u}
    , decltype(_impl_.locationx_){0}
    , decltype(_impl_.locationy_){0}
    , decltype(_impl_.rotation_){0}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.netnumber_){0u}
    , decltype(_impl_.subnetnumber_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentsFile_ComponentRecord_ToeprintRecord::~ComponentsFile_ComponentRecord_ToeprintRecord() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentsFile_ComponentRecord_ToeprintRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ComponentsFile_ComponentRecord_ToeprintRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentsFile_ComponentRecord_ToeprintRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.pinnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.subnetnumber_) -
        reinterpret_cast<char*>(&_impl_.pinnumber_)) + sizeof(_impl_.subnetnumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentsFile_ComponentRecord_ToeprintRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pinNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pinnumber(&has_bits);
          _impl_.pinnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float locationX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_locationx(&has_bits);
          _impl_.locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float locationY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_locationy(&has_bits);
          _impl_.locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 netNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_netnumber(&has_bits);
          _impl_.netnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 subnetNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_subnetnumber(&has_bits);
          _impl_.subnetnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentsFile_ComponentRecord_ToeprintRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 pinNumber = 1;
  if (_internal_has_pinnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pinnumber(), target);
  }

  // optional float locationX = 2;
  if (_internal_has_locationx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_locationx(), target);
  }

  // optional float locationY = 3;
  if (_internal_has_locationy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_locationy(), target);
  }

  // optional float rotation = 4;
  if (_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rotation(), target);
  }

  // optional bool mirror = 5;
  if (_internal_has_mirror()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_mirror(), target);
  }

  // optional uint32 netNumber = 6;
  if (_internal_has_netnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_netnumber(), target);
  }

  // optional uint32 subnetNumber = 7;
  if (_internal_has_subnetnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_subnetnumber(), target);
  }

  // optional string name = 8;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  return target;
}

size_t ComponentsFile_ComponentRecord_ToeprintRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 pinNumber = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pinnumber());
    }

    // optional float locationX = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float locationY = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float rotation = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 netNumber = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_netnumber());
    }

    // optional uint32 subnetNumber = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_subnetnumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentsFile_ComponentRecord_ToeprintRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentsFile_ComponentRecord_ToeprintRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentsFile_ComponentRecord_ToeprintRecord::GetClassData() const { return &_class_data_; }


void ComponentsFile_ComponentRecord_ToeprintRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentsFile_ComponentRecord_ToeprintRecord*>(&to_msg);
  auto& from = static_cast<const ComponentsFile_ComponentRecord_ToeprintRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pinnumber_ = from._impl_.pinnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.locationx_ = from._impl_.locationx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.locationy_ = from._impl_.locationy_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mirror_ = from._impl_.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.netnumber_ = from._impl_.netnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.subnetnumber_ = from._impl_.subnetnumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentsFile_ComponentRecord_ToeprintRecord::CopyFrom(const ComponentsFile_ComponentRecord_ToeprintRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentsFile_ComponentRecord_ToeprintRecord::IsInitialized() const {
  return true;
}

void ComponentsFile_ComponentRecord_ToeprintRecord::InternalSwap(ComponentsFile_ComponentRecord_ToeprintRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.subnetnumber_)
      + sizeof(ComponentsFile_ComponentRecord_ToeprintRecord::_impl_.subnetnumber_)
      - PROTOBUF_FIELD_OFFSET(ComponentsFile_ComponentRecord_ToeprintRecord, _impl_.pinnumber_)>(
          reinterpret_cast<char*>(&_impl_.pinnumber_),
          reinterpret_cast<char*>(&other->_impl_.pinnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentsFile_ComponentRecord_ToeprintRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_componentsfile_2eproto_getter, &descriptor_table_componentsfile_2eproto_once,
      file_level_metadata_componentsfile_2eproto[0]);
}

// ===================================================================

class ComponentsFile_ComponentRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentsFile_ComponentRecord>()._impl_._has_bits_);
  static void set_has_pkgref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_locationx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_locationy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_compname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_partname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

void ComponentsFile_ComponentRecord::clear_propertyrecords() {
  _impl_.propertyrecords_.Clear();
}
ComponentsFile_ComponentRecord::ComponentsFile_ComponentRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
}
ComponentsFile_ComponentRecord::ComponentsFile_ComponentRecord(const ComponentsFile_ComponentRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentsFile_ComponentRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propertyrecords_){from._impl_.propertyrecords_}
    , decltype(_impl_.toeprintrecords_){from._impl_.toeprintrecords_}
    , decltype(_impl_.compname_){}
    , decltype(_impl_.partname_){}
    , decltype(_impl_.attributes_){}
    , decltype(_impl_.pkgref_){}
    , decltype(_impl_.locationx_){}
    , decltype(_impl_.locationy_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_compname()) {
    _this->_impl_.compname_.Set(from._internal_compname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partname()) {
    _this->_impl_.partname_.Set(from._internal_partname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attributes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_.Set(from._internal_attributes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pkgref_, &from._impl_.pkgref_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.pkgref_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
}

inline void ComponentsFile_ComponentRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propertyrecords_){arena}
    , decltype(_impl_.toeprintrecords_){arena}
    , decltype(_impl_.compname_){}
    , decltype(_impl_.partname_){}
    , decltype(_impl_.attributes_){}
    , decltype(_impl_.pkgref_){0u}
    , decltype(_impl_.locationx_){0}
    , decltype(_impl_.locationy_){0}
    , decltype(_impl_.rotation_){0}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.index_){0u}
  };
  _impl_.compname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attributes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentsFile_ComponentRecord::~ComponentsFile_ComponentRecord() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentsFile_ComponentRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.propertyrecords_.~RepeatedPtrField();
  _impl_.toeprintrecords_.~RepeatedPtrField();
  _impl_.compname_.Destroy();
  _impl_.partname_.Destroy();
  _impl_.attributes_.Destroy();
}

void ComponentsFile_ComponentRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentsFile_ComponentRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.propertyrecords_.Clear();
  _impl_.toeprintrecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.compname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.partname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attributes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.pkgref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mirror_) -
        reinterpret_cast<char*>(&_impl_.pkgref_)) + sizeof(_impl_.mirror_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentsFile_ComponentRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pkgRef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pkgref(&has_bits);
          _impl_.pkgref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float locationX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_locationx(&has_bits);
          _impl_.locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float locationY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_locationy(&has_bits);
          _impl_.locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string compName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_compname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName"));
        } else
          goto handle_unusual;
        continue;
      // optional string partName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_partname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName"));
        } else
          goto handle_unusual;
        continue;
      // optional string attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_attributes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord toeprintRecords = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toeprintrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentsFile_ComponentRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 pkgRef = 1;
  if (_internal_has_pkgref()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pkgref(), target);
  }

  // optional float locationX = 2;
  if (_internal_has_locationx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_locationx(), target);
  }

  // optional float locationY = 3;
  if (_internal_has_locationy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_locationy(), target);
  }

  // optional float rotation = 4;
  if (_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rotation(), target);
  }

  // optional bool mirror = 5;
  if (_internal_has_mirror()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_mirror(), target);
  }

  // optional string compName = 6;
  if (_internal_has_compname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compname().data(), static_cast<int>(this->_internal_compname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_compname(), target);
  }

  // optional string partName = 7;
  if (_internal_has_partname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partname().data(), static_cast<int>(this->_internal_partname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_partname(), target);
  }

  // optional string attributes = 8;
  if (_internal_has_attributes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attributes().data(), static_cast<int>(this->_internal_attributes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_attributes(), target);
  }

  // optional uint32 id = 9;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_id(), target);
  }

  // optional uint32 index = 10;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_index(), target);
  }

  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_propertyrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_propertyrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord toeprintRecords = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toeprintrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_toeprintrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  return target;
}

size_t ComponentsFile_ComponentRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  total_size += 1UL * this->_internal_propertyrecords_size();
  for (const auto& msg : this->_impl_.propertyrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord toeprintRecords = 12;
  total_size += 1UL * this->_internal_toeprintrecords_size();
  for (const auto& msg : this->_impl_.toeprintrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string compName = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compname());
    }

    // optional string partName = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partname());
    }

    // optional string attributes = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributes());
    }

    // optional uint32 pkgRef = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pkgref());
    }

    // optional float locationX = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float locationY = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float rotation = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 index = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentsFile_ComponentRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentsFile_ComponentRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentsFile_ComponentRecord::GetClassData() const { return &_class_data_; }


void ComponentsFile_ComponentRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentsFile_ComponentRecord*>(&to_msg);
  auto& from = static_cast<const ComponentsFile_ComponentRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.propertyrecords_.MergeFrom(from._impl_.propertyrecords_);
  _this->_impl_.toeprintrecords_.MergeFrom(from._impl_.toeprintrecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_compname(from._internal_compname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_partname(from._internal_partname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attributes(from._internal_attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pkgref_ = from._impl_.pkgref_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.locationx_ = from._impl_.locationx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.locationy_ = from._impl_.locationy_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mirror_ = from._impl_.mirror_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentsFile_ComponentRecord::CopyFrom(const ComponentsFile_ComponentRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentsFile_ComponentRecord::IsInitialized() const {
  return true;
}

void ComponentsFile_ComponentRecord::InternalSwap(ComponentsFile_ComponentRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.propertyrecords_.InternalSwap(&other->_impl_.propertyrecords_);
  _impl_.toeprintrecords_.InternalSwap(&other->_impl_.toeprintrecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compname_, lhs_arena,
      &other->_impl_.compname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partname_, lhs_arena,
      &other->_impl_.partname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributes_, lhs_arena,
      &other->_impl_.attributes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentsFile_ComponentRecord, _impl_.index_)
      + sizeof(ComponentsFile_ComponentRecord::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ComponentsFile_ComponentRecord, _impl_.pkgref_)>(
          reinterpret_cast<char*>(&_impl_.pkgref_),
          reinterpret_cast<char*>(&other->_impl_.pkgref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentsFile_ComponentRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_componentsfile_2eproto_getter, &descriptor_table_componentsfile_2eproto_once,
      file_level_metadata_componentsfile_2eproto[1]);
}

// ===================================================================

ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse() {}
ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::MergeFrom(const ComponentsFile_ComponentRecordsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_componentsfile_2eproto_getter, &descriptor_table_componentsfile_2eproto_once,
      file_level_metadata_componentsfile_2eproto[2]);
}

// ===================================================================

ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse() {}
ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::MergeFrom(const ComponentsFile_PropertyRecordsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_componentsfile_2eproto_getter, &descriptor_table_componentsfile_2eproto_once,
      file_level_metadata_componentsfile_2eproto[3]);
}

// ===================================================================

class ComponentsFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentsFile>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_layername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void ComponentsFile::clear_propertyrecords() {
  _impl_.propertyrecords_.Clear();
}
void ComponentsFile::clear_propertyrecordsbyname() {
  _impl_.propertyrecordsbyname_.Clear();
}
ComponentsFile::ComponentsFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ComponentsFile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Odb.Lib.Protobuf.ComponentsFile)
}
ComponentsFile::ComponentsFile(const ComponentsFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentsFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributenames_){from._impl_.attributenames_}
    , decltype(_impl_.attributetextvalues_){from._impl_.attributetextvalues_}
    , decltype(_impl_.componentrecords_){from._impl_.componentrecords_}
    , /*decltype(_impl_.componentrecordsbyname_)*/{}
    , decltype(_impl_.propertyrecords_){from._impl_.propertyrecords_}
    , /*decltype(_impl_.propertyrecordsbyname_)*/{}
    , decltype(_impl_.units_){}
    , decltype(_impl_.layername_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.side_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.componentrecordsbyname_.MergeFrom(from._impl_.componentrecordsbyname_);
  _this->_impl_.propertyrecordsbyname_.MergeFrom(from._impl_.propertyrecordsbyname_);
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_units()) {
    _this->_impl_.units_.Set(from._internal_units(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layername()) {
    _this->_impl_.layername_.Set(from._internal_layername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    _this->_impl_.directory_.Set(from._internal_directory(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.side_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.side_));
  // @@protoc_insertion_point(copy_constructor:Odb.Lib.Protobuf.ComponentsFile)
}

inline void ComponentsFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributenames_){arena}
    , decltype(_impl_.attributetextvalues_){arena}
    , decltype(_impl_.componentrecords_){arena}
    , /*decltype(_impl_.componentrecordsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.propertyrecords_){arena}
    , /*decltype(_impl_.propertyrecordsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.units_){}
    , decltype(_impl_.layername_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.directory_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.side_){0}
  };
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentsFile::~ComponentsFile() {
  // @@protoc_insertion_point(destructor:Odb.Lib.Protobuf.ComponentsFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ComponentsFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributenames_.~RepeatedPtrField();
  _impl_.attributetextvalues_.~RepeatedPtrField();
  _impl_.componentrecords_.~RepeatedPtrField();
  _impl_.componentrecordsbyname_.Destruct();
  _impl_.componentrecordsbyname_.~MapField();
  _impl_.propertyrecords_.~RepeatedPtrField();
  _impl_.propertyrecordsbyname_.Destruct();
  _impl_.propertyrecordsbyname_.~MapField();
  _impl_.units_.Destroy();
  _impl_.layername_.Destroy();
  _impl_.path_.Destroy();
  _impl_.directory_.Destroy();
}

void ComponentsFile::ArenaDtor(void* object) {
  ComponentsFile* _this = reinterpret_cast< ComponentsFile* >(object);
  _this->_impl_.componentrecordsbyname_.Destruct();
  _this->_impl_.propertyrecordsbyname_.Destruct();
}
void ComponentsFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentsFile::Clear() {
// @@protoc_insertion_point(message_clear_start:Odb.Lib.Protobuf.ComponentsFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributenames_.Clear();
  _impl_.attributetextvalues_.Clear();
  _impl_.componentrecords_.Clear();
  _impl_.componentrecordsbyname_.Clear();
  _impl_.propertyrecords_.Clear();
  _impl_.propertyrecordsbyname_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.layername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.directory_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.side_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.side_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentsFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_units();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.units"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Odb.Lib.Protobuf.BoardSide side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::Odb::Lib::Protobuf::BoardSide>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string layerName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_layername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.layerName"));
        } else
          goto handle_unusual;
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.path"));
        } else
          goto handle_unusual;
        continue;
      // optional string directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.directory"));
        } else
          goto handle_unusual;
        continue;
      // repeated string attributeNames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.attributeNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string attributeTextValues = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributetextvalues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Odb.Lib.Protobuf.ComponentsFile.attributeTextValues"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord componentRecords = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_componentrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord> componentRecordsByName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.componentrecordsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Odb.Lib.Protobuf.PropertyRecord> propertyRecordsByName = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.propertyrecordsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentsFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Odb.Lib.Protobuf.ComponentsFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string units = 1;
  if (_internal_has_units()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.units");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_units(), target);
  }

  // optional uint32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional .Odb.Lib.Protobuf.BoardSide side = 3;
  if (_internal_has_side()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  // optional string layerName = 4;
  if (_internal_has_layername()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layername().data(), static_cast<int>(this->_internal_layername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.layerName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_layername(), target);
  }

  // optional string path = 5;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  // optional string directory = 6;
  if (_internal_has_directory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.directory");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_directory(), target);
  }

  // repeated string attributeNames = 7;
  for (int i = 0, n = this->_internal_attributenames_size(); i < n; i++) {
    const auto& s = this->_internal_attributenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.attributeNames");
    target = stream->WriteString(7, s, target);
  }

  // repeated string attributeTextValues = 8;
  for (int i = 0, n = this->_internal_attributetextvalues_size(); i < n; i++) {
    const auto& s = this->_internal_attributetextvalues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Odb.Lib.Protobuf.ComponentsFile.attributeTextValues");
    target = stream->WriteString(8, s, target);
  }

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord componentRecords = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_componentrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_componentrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord> componentRecordsByName = 10;
  if (!this->_internal_componentrecordsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord>;
    using WireHelper = ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_componentrecordsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.ComponentsFile.ComponentRecordsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_propertyrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_propertyrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .Odb.Lib.Protobuf.PropertyRecord> propertyRecordsByName = 12;
  if (!this->_internal_propertyrecordsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::Odb::Lib::Protobuf::PropertyRecord>;
    using WireHelper = ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_propertyrecordsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Odb.Lib.Protobuf.ComponentsFile.PropertyRecordsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Odb.Lib.Protobuf.ComponentsFile)
  return target;
}

size_t ComponentsFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Odb.Lib.Protobuf.ComponentsFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributeNames = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributenames_.size());
  for (int i = 0, n = _impl_.attributenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributenames_.Get(i));
  }

  // repeated string attributeTextValues = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributetextvalues_.size());
  for (int i = 0, n = _impl_.attributetextvalues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributetextvalues_.Get(i));
  }

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord componentRecords = 9;
  total_size += 1UL * this->_internal_componentrecords_size();
  for (const auto& msg : this->_impl_.componentrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord> componentRecordsByName = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_componentrecordsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >::const_iterator
      it = this->_internal_componentrecordsbyname().begin();
      it != this->_internal_componentrecordsbyname().end(); ++it) {
    total_size += ComponentsFile_ComponentRecordsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  total_size += 1UL * this->_internal_propertyrecords_size();
  for (const auto& msg : this->_impl_.propertyrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .Odb.Lib.Protobuf.PropertyRecord> propertyRecordsByName = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_propertyrecordsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >::const_iterator
      it = this->_internal_propertyrecordsbyname().begin();
      it != this->_internal_propertyrecordsbyname().end(); ++it) {
    total_size += ComponentsFile_PropertyRecordsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string units = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string layerName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layername());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string directory = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional .Odb.Lib.Protobuf.BoardSide side = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentsFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentsFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentsFile::GetClassData() const { return &_class_data_; }


void ComponentsFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentsFile*>(&to_msg);
  auto& from = static_cast<const ComponentsFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Odb.Lib.Protobuf.ComponentsFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributenames_.MergeFrom(from._impl_.attributenames_);
  _this->_impl_.attributetextvalues_.MergeFrom(from._impl_.attributetextvalues_);
  _this->_impl_.componentrecords_.MergeFrom(from._impl_.componentrecords_);
  _this->_impl_.componentrecordsbyname_.MergeFrom(from._impl_.componentrecordsbyname_);
  _this->_impl_.propertyrecords_.MergeFrom(from._impl_.propertyrecords_);
  _this->_impl_.propertyrecordsbyname_.MergeFrom(from._impl_.propertyrecordsbyname_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_layername(from._internal_layername());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.side_ = from._impl_.side_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentsFile::CopyFrom(const ComponentsFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Odb.Lib.Protobuf.ComponentsFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentsFile::IsInitialized() const {
  return true;
}

void ComponentsFile::InternalSwap(ComponentsFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributenames_.InternalSwap(&other->_impl_.attributenames_);
  _impl_.attributetextvalues_.InternalSwap(&other->_impl_.attributetextvalues_);
  _impl_.componentrecords_.InternalSwap(&other->_impl_.componentrecords_);
  _impl_.componentrecordsbyname_.InternalSwap(&other->_impl_.componentrecordsbyname_);
  _impl_.propertyrecords_.InternalSwap(&other->_impl_.propertyrecords_);
  _impl_.propertyrecordsbyname_.InternalSwap(&other->_impl_.propertyrecordsbyname_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.units_, lhs_arena,
      &other->_impl_.units_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layername_, lhs_arena,
      &other->_impl_.layername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_, lhs_arena,
      &other->_impl_.directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentsFile, _impl_.side_)
      + sizeof(ComponentsFile::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(ComponentsFile, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentsFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_componentsfile_2eproto_getter, &descriptor_table_componentsfile_2eproto_once,
      file_level_metadata_componentsfile_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Odb::Lib::Protobuf::ComponentsFile*
Arena::CreateMaybeMessage< ::Odb::Lib::Protobuf::ComponentsFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Odb::Lib::Protobuf::ComponentsFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
