// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netlistfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netlistfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netlistfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netlistfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netlistfile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netlistfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class NetlistFile;
struct NetlistFileDefaultTypeInternal;
extern NetlistFileDefaultTypeInternal _NetlistFile_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ::Odb::Lib::Protobuf::NetlistFile* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::NetlistFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

enum NetlistFile_Staggered : int {
  NetlistFile_Staggered_Yes = 0,
  NetlistFile_Staggered_No = 1,
  NetlistFile_Staggered_Unknown = 2,
  NetlistFile_Staggered_NetlistFile_Staggered_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetlistFile_Staggered_NetlistFile_Staggered_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetlistFile_Staggered_IsValid(int value);
constexpr NetlistFile_Staggered NetlistFile_Staggered_Staggered_MIN = NetlistFile_Staggered_Yes;
constexpr NetlistFile_Staggered NetlistFile_Staggered_Staggered_MAX = NetlistFile_Staggered_Unknown;
constexpr int NetlistFile_Staggered_Staggered_ARRAYSIZE = NetlistFile_Staggered_Staggered_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetlistFile_Staggered_descriptor();
template<typename T>
inline const std::string& NetlistFile_Staggered_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetlistFile_Staggered>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetlistFile_Staggered_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetlistFile_Staggered_descriptor(), enum_t_value);
}
inline bool NetlistFile_Staggered_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetlistFile_Staggered* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetlistFile_Staggered>(
    NetlistFile_Staggered_descriptor(), name, value);
}
// ===================================================================

class NetlistFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.NetlistFile) */ {
 public:
  inline NetlistFile() : NetlistFile(nullptr) {}
  ~NetlistFile() override;
  explicit PROTOBUF_CONSTEXPR NetlistFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetlistFile(const NetlistFile& from);
  NetlistFile(NetlistFile&& from) noexcept
    : NetlistFile() {
    *this = ::std::move(from);
  }

  inline NetlistFile& operator=(const NetlistFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetlistFile& operator=(NetlistFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetlistFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetlistFile* internal_default_instance() {
    return reinterpret_cast<const NetlistFile*>(
               &_NetlistFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetlistFile& a, NetlistFile& b) {
    a.Swap(&b);
  }
  inline void Swap(NetlistFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetlistFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetlistFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetlistFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetlistFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetlistFile& from) {
    NetlistFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetlistFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.NetlistFile";
  }
  protected:
  explicit NetlistFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetlistFile_Staggered Staggered;
  static constexpr Staggered Yes =
    NetlistFile_Staggered_Yes;
  static constexpr Staggered No =
    NetlistFile_Staggered_No;
  static constexpr Staggered Unknown =
    NetlistFile_Staggered_Unknown;
  static inline bool Staggered_IsValid(int value) {
    return NetlistFile_Staggered_IsValid(value);
  }
  static constexpr Staggered Staggered_MIN =
    NetlistFile_Staggered_Staggered_MIN;
  static constexpr Staggered Staggered_MAX =
    NetlistFile_Staggered_Staggered_MAX;
  static constexpr int Staggered_ARRAYSIZE =
    NetlistFile_Staggered_Staggered_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Staggered_descriptor() {
    return NetlistFile_Staggered_descriptor();
  }
  template<typename T>
  static inline const std::string& Staggered_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Staggered>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Staggered_Name.");
    return NetlistFile_Staggered_Name(enum_t_value);
  }
  static inline bool Staggered_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Staggered* value) {
    return NetlistFile_Staggered_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNetNamesFieldNumber = 6,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kUnitsFieldNumber = 3,
    kOptimizedFieldNumber = 4,
    kStaggeredFieldNumber = 5,
  };
  // repeated string netNames = 6;
  int netnames_size() const;
  private:
  int _internal_netnames_size() const;
  public:
  void clear_netnames();
  const std::string& netnames(int index) const;
  std::string* mutable_netnames(int index);
  void set_netnames(int index, const std::string& value);
  void set_netnames(int index, std::string&& value);
  void set_netnames(int index, const char* value);
  void set_netnames(int index, const char* value, size_t size);
  std::string* add_netnames();
  void add_netnames(const std::string& value);
  void add_netnames(std::string&& value);
  void add_netnames(const char* value);
  void add_netnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& netnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_netnames();
  private:
  const std::string& _internal_netnames(int index) const;
  std::string* _internal_add_netnames();
  public:

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string units = 3;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional bool optimized = 4;
  bool has_optimized() const;
  private:
  bool _internal_has_optimized() const;
  public:
  void clear_optimized();
  bool optimized() const;
  void set_optimized(bool value);
  private:
  bool _internal_optimized() const;
  void _internal_set_optimized(bool value);
  public:

  // optional .Odb.Lib.Protobuf.NetlistFile.Staggered staggered = 5;
  bool has_staggered() const;
  private:
  bool _internal_has_staggered() const;
  public:
  void clear_staggered();
  ::Odb::Lib::Protobuf::NetlistFile_Staggered staggered() const;
  void set_staggered(::Odb::Lib::Protobuf::NetlistFile_Staggered value);
  private:
  ::Odb::Lib::Protobuf::NetlistFile_Staggered _internal_staggered() const;
  void _internal_set_staggered(::Odb::Lib::Protobuf::NetlistFile_Staggered value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.NetlistFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> netnames_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
    bool optimized_;
    int staggered_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_netlistfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetlistFile

// optional string path = 1;
inline bool NetlistFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetlistFile::has_path() const {
  return _internal_has_path();
}
inline void NetlistFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetlistFile::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetlistFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.path)
}
inline std::string* NetlistFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.NetlistFile.path)
  return _s;
}
inline const std::string& NetlistFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void NetlistFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* NetlistFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* NetlistFile::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.NetlistFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetlistFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.NetlistFile.path)
}

// optional string name = 2;
inline bool NetlistFile::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetlistFile::has_name() const {
  return _internal_has_name();
}
inline void NetlistFile::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetlistFile::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetlistFile::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.name)
}
inline std::string* NetlistFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.NetlistFile.name)
  return _s;
}
inline const std::string& NetlistFile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NetlistFile::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetlistFile::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetlistFile::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.NetlistFile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetlistFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.NetlistFile.name)
}

// optional string units = 3;
inline bool NetlistFile::_internal_has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetlistFile::has_units() const {
  return _internal_has_units();
}
inline void NetlistFile::clear_units() {
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetlistFile::units() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetlistFile::set_units(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.units_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.units)
}
inline std::string* NetlistFile::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.NetlistFile.units)
  return _s;
}
inline const std::string& NetlistFile::_internal_units() const {
  return _impl_.units_.Get();
}
inline void NetlistFile::_internal_set_units(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.units_.Set(value, GetArenaForAllocation());
}
inline std::string* NetlistFile::_internal_mutable_units() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.units_.Mutable(GetArenaForAllocation());
}
inline std::string* NetlistFile::release_units() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.NetlistFile.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.units_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetlistFile::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.units_.SetAllocated(units, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.NetlistFile.units)
}

// optional bool optimized = 4;
inline bool NetlistFile::_internal_has_optimized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetlistFile::has_optimized() const {
  return _internal_has_optimized();
}
inline void NetlistFile::clear_optimized() {
  _impl_.optimized_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NetlistFile::_internal_optimized() const {
  return _impl_.optimized_;
}
inline bool NetlistFile::optimized() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.optimized)
  return _internal_optimized();
}
inline void NetlistFile::_internal_set_optimized(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.optimized_ = value;
}
inline void NetlistFile::set_optimized(bool value) {
  _internal_set_optimized(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.optimized)
}

// optional .Odb.Lib.Protobuf.NetlistFile.Staggered staggered = 5;
inline bool NetlistFile::_internal_has_staggered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetlistFile::has_staggered() const {
  return _internal_has_staggered();
}
inline void NetlistFile::clear_staggered() {
  _impl_.staggered_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::Odb::Lib::Protobuf::NetlistFile_Staggered NetlistFile::_internal_staggered() const {
  return static_cast< ::Odb::Lib::Protobuf::NetlistFile_Staggered >(_impl_.staggered_);
}
inline ::Odb::Lib::Protobuf::NetlistFile_Staggered NetlistFile::staggered() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.staggered)
  return _internal_staggered();
}
inline void NetlistFile::_internal_set_staggered(::Odb::Lib::Protobuf::NetlistFile_Staggered value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.staggered_ = value;
}
inline void NetlistFile::set_staggered(::Odb::Lib::Protobuf::NetlistFile_Staggered value) {
  _internal_set_staggered(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.staggered)
}

// repeated string netNames = 6;
inline int NetlistFile::_internal_netnames_size() const {
  return _impl_.netnames_.size();
}
inline int NetlistFile::netnames_size() const {
  return _internal_netnames_size();
}
inline void NetlistFile::clear_netnames() {
  _impl_.netnames_.Clear();
}
inline std::string* NetlistFile::add_netnames() {
  std::string* _s = _internal_add_netnames();
  // @@protoc_insertion_point(field_add_mutable:Odb.Lib.Protobuf.NetlistFile.netNames)
  return _s;
}
inline const std::string& NetlistFile::_internal_netnames(int index) const {
  return _impl_.netnames_.Get(index);
}
inline const std::string& NetlistFile::netnames(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.NetlistFile.netNames)
  return _internal_netnames(index);
}
inline std::string* NetlistFile::mutable_netnames(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.NetlistFile.netNames)
  return _impl_.netnames_.Mutable(index);
}
inline void NetlistFile::set_netnames(int index, const std::string& value) {
  _impl_.netnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::set_netnames(int index, std::string&& value) {
  _impl_.netnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::set_netnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.netnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::set_netnames(int index, const char* value, size_t size) {
  _impl_.netnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline std::string* NetlistFile::_internal_add_netnames() {
  return _impl_.netnames_.Add();
}
inline void NetlistFile::add_netnames(const std::string& value) {
  _impl_.netnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::add_netnames(std::string&& value) {
  _impl_.netnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::add_netnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.netnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline void NetlistFile::add_netnames(const char* value, size_t size) {
  _impl_.netnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Odb.Lib.Protobuf.NetlistFile.netNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetlistFile::netnames() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.NetlistFile.netNames)
  return _impl_.netnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetlistFile::mutable_netnames() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.NetlistFile.netNames)
  return &_impl_.netnames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Odb::Lib::Protobuf::NetlistFile_Staggered> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Odb::Lib::Protobuf::NetlistFile_Staggered>() {
  return ::Odb::Lib::Protobuf::NetlistFile_Staggered_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netlistfile_2eproto
