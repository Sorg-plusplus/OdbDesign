// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edadatafile.proto

#include "edadatafile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace odbdesign {
namespace proto {
PROTOBUF_CONSTEXPR EdaDataFile_PropertyRecord::EdaDataFile_PropertyRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.floatvalues_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct EdaDataFile_PropertyRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_PropertyRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_PropertyRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_PropertyRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_PropertyRecordDefaultTypeInternal _EdaDataFile_PropertyRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.layernumber_)*/0u
  , /*decltype(_impl_.featurenumber_)*/0u} {}
struct EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal _EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecord::EdaDataFile_NetRecord_SubnetRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.featureidrecords_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.filltype_)*/0
  , /*decltype(_impl_.cutouttype_)*/0
  , /*decltype(_impl_.fillsize_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.componentnumber_)*/0u
  , /*decltype(_impl_.toeprintnumber_)*/0u} {}
struct EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_NetRecord_SubnetRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal _EdaDataFile_NetRecord_SubnetRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_NetRecord::EdaDataFile_NetRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subnetrecords_)*/{}
  , /*decltype(_impl_.propertyrecords_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributesidstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u} {}
struct EdaDataFile_NetRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_NetRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_NetRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_NetRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_NetRecordDefaultTypeInternal _EdaDataFile_NetRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecord::EdaDataFile_PackageRecord_PinRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.xcenter_)*/0
  , /*decltype(_impl_.ycenter_)*/0
  , /*decltype(_impl_.finishedholesize_)*/0
  , /*decltype(_impl_.electricaltype_)*/0
  , /*decltype(_impl_.mounttype_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.index_)*/0u} {}
struct EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_PackageRecord_PinRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal _EdaDataFile_PackageRecord_PinRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord::EdaDataFile_PackageRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pinrecords_)*/{}
  , /*decltype(_impl_.pinrecordsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.propertyrecords_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attributesidstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.xmin_)*/0
  , /*decltype(_impl_.ymin_)*/0
  , /*decltype(_impl_.xmax_)*/0
  , /*decltype(_impl_.ymax_)*/0} {}
struct EdaDataFile_PackageRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_PackageRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_PackageRecordDefaultTypeInternal() {}
  union {
    EdaDataFile_PackageRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_PackageRecordDefaultTypeInternal _EdaDataFile_PackageRecord_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_NetRecordsByNameEntry_DoNotUse::EdaDataFile_NetRecordsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EdaDataFile_NetRecordsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_NetRecordsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile_PackageRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecordsByNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EdaDataFile_PackageRecordsByNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_PackageRecordsByNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR EdaDataFile::EdaDataFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layernames_)*/{}
  , /*decltype(_impl_.attributenames_)*/{}
  , /*decltype(_impl_.attributetextvalues_)*/{}
  , /*decltype(_impl_.netrecords_)*/{}
  , /*decltype(_impl_.netrecordsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.packagerecords_)*/{}
  , /*decltype(_impl_.packagerecordsbyname_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.units_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct EdaDataFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdaDataFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdaDataFileDefaultTypeInternal() {}
  union {
    EdaDataFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdaDataFileDefaultTypeInternal _EdaDataFile_default_instance_;
}  // namespace proto
}  // namespace odbdesign
static ::_pb::Metadata file_level_metadata_edadatafile_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_edadatafile_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_edadatafile_2eproto = nullptr;

const uint32_t TableStruct_edadatafile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PropertyRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PropertyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PropertyRecord, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PropertyRecord, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PropertyRecord, _impl_.floatvalues_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_.layernumber_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_.featurenumber_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.featureidrecords_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.filltype_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.cutouttype_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.fillsize_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.componentnumber_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord, _impl_.toeprintnumber_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_.attributesidstring_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_.subnetrecords_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecord, _impl_.propertyrecords_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.xcenter_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.ycenter_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.finishedholesize_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.electricaltype_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.mounttype_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord, _impl_.index_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.xmin_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.ymin_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.xmax_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.ymax_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.attributesidstring_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.pinrecords_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.pinrecordsbyname_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecord, _impl_.propertyrecords_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.layernames_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.attributenames_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.attributetextvalues_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.netrecords_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.netrecordsbyname_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.packagerecords_),
  PROTOBUF_FIELD_OFFSET(::odbdesign::proto::EdaDataFile, _impl_.packagerecordsbyname_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::odbdesign::proto::EdaDataFile_PropertyRecord)},
  { 12, 21, -1, sizeof(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord)},
  { 24, 38, -1, sizeof(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord)},
  { 46, 57, -1, sizeof(::odbdesign::proto::EdaDataFile_NetRecord)},
  { 62, 70, -1, sizeof(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse)},
  { 72, 87, -1, sizeof(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord)},
  { 96, 112, -1, sizeof(::odbdesign::proto::EdaDataFile_PackageRecord)},
  { 122, 130, -1, sizeof(::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse)},
  { 132, 140, -1, sizeof(::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse)},
  { 142, 158, -1, sizeof(::odbdesign::proto::EdaDataFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::odbdesign::proto::_EdaDataFile_PropertyRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_NetRecord_SubnetRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_NetRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_PackageRecord_PinRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_PackageRecord_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_NetRecordsByNameEntry_DoNotUse_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_PackageRecordsByNameEntry_DoNotUse_default_instance_._instance,
  &::odbdesign::proto::_EdaDataFile_default_instance_._instance,
};

const char descriptor_table_protodef_edadatafile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021edadatafile.proto\022\017odbdesign.proto\"\221\033\n"
  "\013EdaDataFile\022\021\n\004path\030\001 \001(\tH\000\210\001\001\022\022\n\005units"
  "\030\002 \001(\tH\001\210\001\001\022\023\n\006source\030\003 \001(\tH\002\210\001\001\022\022\n\nlaye"
  "rNames\030\004 \003(\t\022\026\n\016attributeNames\030\005 \003(\t\022\033\n\023"
  "attributeTextValues\030\006 \003(\t\022:\n\nnetRecords\030"
  "\007 \003(\0132&.odbdesign.proto.EdaDataFile.NetR"
  "ecord\022L\n\020netRecordsByName\030\010 \003(\01322.odbdes"
  "ign.proto.EdaDataFile.NetRecordsByNameEn"
  "try\022B\n\016packageRecords\030\t \003(\0132*.odbdesign."
  "proto.EdaDataFile.PackageRecord\022T\n\024packa"
  "geRecordsByName\030\n \003(\01326.odbdesign.proto."
  "EdaDataFile.PackageRecordsByNameEntry\032_\n"
  "\016PropertyRecord\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\022\n\005va"
  "lue\030\002 \001(\tH\001\210\001\001\022\023\n\013floatValues\030\003 \003(\002B\007\n\005_"
  "nameB\010\n\006_value\032\201\n\n\tNetRecord\022\021\n\004name\030\001 \001"
  "(\tH\000\210\001\001\022\037\n\022attributesIdString\030\002 \001(\tH\001\210\001\001"
  "\022\022\n\005index\030\003 \001(\rH\002\210\001\001\022J\n\rsubnetRecords\030\004 "
  "\003(\01323.odbdesign.proto.EdaDataFile.NetRec"
  "ord.SubnetRecord\022D\n\017propertyRecords\030\005 \003("
  "\0132+.odbdesign.proto.EdaDataFile.Property"
  "Record\032\357\007\n\014SubnetRecord\022K\n\004type\030\001 \001(\01628."
  "odbdesign.proto.EdaDataFile.NetRecord.Su"
  "bnetRecord.TypeH\000\210\001\001\022]\n\020featureIdRecords"
  "\030\002 \003(\0132C.odbdesign.proto.EdaDataFile.Net"
  "Record.SubnetRecord.FeatureIdRecord\022S\n\010f"
  "illType\030\003 \001(\0162<.odbdesign.proto.EdaDataF"
  "ile.NetRecord.SubnetRecord.FillTypeH\001\210\001\001"
  "\022W\n\ncutoutType\030\004 \001(\0162>.odbdesign.proto.E"
  "daDataFile.NetRecord.SubnetRecord.Cutout"
  "TypeH\002\210\001\001\022\025\n\010fillSize\030\005 \001(\002H\003\210\001\001\0229\n\004side"
  "\030\006 \001(\0162&.odbdesign.proto.EdaDataFile.Boa"
  "rdSideH\004\210\001\001\022\034\n\017componentNumber\030\007 \001(\rH\005\210\001"
  "\001\022\033\n\016toeprintNumber\030\010 \001(\rH\006\210\001\001\032\373\001\n\017Featu"
  "reIdRecord\022[\n\004type\030\001 \001(\0162H.odbdesign.pro"
  "to.EdaDataFile.NetRecord.SubnetRecord.Fe"
  "atureIdRecord.TypeH\000\210\001\001\022\030\n\013layerNumber\030\002"
  " \001(\rH\001\210\001\001\022\032\n\rfeatureNumber\030\003 \001(\rH\002\210\001\001\"*\n"
  "\004Type\022\n\n\006COPPER\020\000\022\014\n\010LAMINATE\020\001\022\010\n\004HOLE\020"
  "\002B\007\n\005_typeB\016\n\014_layerNumberB\020\n\016_featureNu"
  "mber\"3\n\004Type\022\007\n\003VIA\020\000\022\t\n\005TRACE\020\001\022\t\n\005PLAN"
  "E\020\002\022\014\n\010TOEPRINT\020\003\"\"\n\010FillType\022\t\n\005SOLID\020\000"
  "\022\013\n\007OUTLINE\020\001\"\?\n\nCutoutType\022\n\n\006CIRCLE\020\000\022"
  "\r\n\tRECTANGLE\020\001\022\013\n\007OCTAGON\020\002\022\t\n\005EXACT\020\003B\007"
  "\n\005_typeB\013\n\t_fillTypeB\r\n\013_cutoutTypeB\013\n\t_"
  "fillSizeB\007\n\005_sideB\022\n\020_componentNumberB\021\n"
  "\017_toeprintNumberB\007\n\005_nameB\025\n\023_attributes"
  "IdStringB\010\n\006_index\032\351\n\n\rPackageRecord\022\021\n\004"
  "name\030\001 \001(\tH\000\210\001\001\022\022\n\005pitch\030\002 \001(\002H\001\210\001\001\022\021\n\004x"
  "Min\030\003 \001(\002H\002\210\001\001\022\021\n\004yMin\030\004 \001(\002H\003\210\001\001\022\021\n\004xMa"
  "x\030\005 \001(\002H\004\210\001\001\022\021\n\004yMax\030\006 \001(\002H\005\210\001\001\022\037\n\022attri"
  "butesIdString\030\007 \001(\tH\006\210\001\001\022H\n\npinRecords\030\010"
  " \003(\01324.odbdesign.proto.EdaDataFile.Packa"
  "geRecord.PinRecord\022Z\n\020pinRecordsByName\030\t"
  " \003(\0132@.odbdesign.proto.EdaDataFile.Packa"
  "geRecord.PinRecordsByNameEntry\022D\n\017proper"
  "tyRecords\030\n \003(\0132+.odbdesign.proto.EdaDat"
  "aFile.PropertyRecord\032m\n\025PinRecordsByName"
  "Entry\022\013\n\003key\030\001 \001(\t\022C\n\005value\030\002 \001(\01324.odbd"
  "esign.proto.EdaDataFile.PackageRecord.Pi"
  "nRecord:\0028\001\032\232\006\n\tPinRecord\022\021\n\004name\030\001 \001(\tH"
  "\000\210\001\001\022L\n\004type\030\002 \001(\01629.odbdesign.proto.Eda"
  "DataFile.PackageRecord.PinRecord.TypeH\001\210"
  "\001\001\022\024\n\007xCenter\030\003 \001(\002H\002\210\001\001\022\024\n\007yCenter\030\004 \001("
  "\002H\003\210\001\001\022\035\n\020finishedHoleSize\030\005 \001(\002H\004\210\001\001\022`\n"
  "\016electricalType\030\006 \001(\0162C.odbdesign.proto."
  "EdaDataFile.PackageRecord.PinRecord.Elec"
  "tricalTypeH\005\210\001\001\022V\n\tmountType\030\007 \001(\0162>.odb"
  "design.proto.EdaDataFile.PackageRecord.P"
  "inRecord.MountTypeH\006\210\001\001\022\017\n\002id\030\010 \001(\rH\007\210\001\001"
  "\022\022\n\005index\030\t \001(\rH\010\210\001\001\"0\n\004Type\022\020\n\014THROUGH_"
  "HOLE\020\000\022\t\n\005BLIND\020\001\022\013\n\007SURFACE\020\002\"C\n\016Electr"
  "icalType\022\016\n\nELECTRICAL\020\000\022\022\n\016NON_ELECTRIC"
  "AL\020\001\022\r\n\tUNDEFINED\020\002\"\231\001\n\tMountType\022\007\n\003SMT"
  "\020\000\022\027\n\023RECOMMENDED_SMT_PAD\020\001\022\023\n\017MT_THROUG"
  "H_HOLE\020\002\022\034\n\030RECOMMENDED_THROUGH_HOLE\020\003\022\014"
  "\n\010PRESSFIT\020\004\022\r\n\tNON_BOARD\020\005\022\010\n\004HOLE\020\006\022\020\n"
  "\014MT_UNDEFINED\020\007B\007\n\005_nameB\007\n\005_typeB\n\n\010_xC"
  "enterB\n\n\010_yCenterB\023\n\021_finishedHoleSizeB\021"
  "\n\017_electricalTypeB\014\n\n_mountTypeB\005\n\003_idB\010"
  "\n\006_indexB\007\n\005_nameB\010\n\006_pitchB\007\n\005_xMinB\007\n\005"
  "_yMinB\007\n\005_xMaxB\007\n\005_yMaxB\025\n\023_attributesId"
  "String\032_\n\025NetRecordsByNameEntry\022\013\n\003key\030\001"
  " \001(\t\0225\n\005value\030\002 \001(\0132&.odbdesign.proto.Ed"
  "aDataFile.NetRecord:\0028\001\032g\n\031PackageRecord"
  "sByNameEntry\022\013\n\003key\030\001 \001(\t\0229\n\005value\030\002 \001(\013"
  "2*.odbdesign.proto.EdaDataFile.PackageRe"
  "cord:\0028\001\" \n\tBoardSide\022\007\n\003TOP\020\000\022\n\n\006BOTTOM"
  "\020\001B\007\n\005_pathB\010\n\006_unitsB\t\n\007_sourceb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_edadatafile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_edadatafile_2eproto = {
    false, false, 3520, descriptor_table_protodef_edadatafile_2eproto,
    "edadatafile.proto",
    &descriptor_table_edadatafile_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_edadatafile_2eproto::offsets,
    file_level_metadata_edadatafile_2eproto, file_level_enum_descriptors_edadatafile_2eproto,
    file_level_service_descriptors_edadatafile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_edadatafile_2eproto_getter() {
  return &descriptor_table_edadatafile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_edadatafile_2eproto(&descriptor_table_edadatafile_2eproto);
namespace odbdesign {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[0];
}
bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::COPPER;
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::LAMINATE;
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::HOLE;
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::Type_MIN;
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::Type_MAX;
constexpr int EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[1];
}
bool EdaDataFile_NetRecord_SubnetRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::VIA;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::TRACE;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::PLANE;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::TOEPRINT;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::Type_MIN;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::Type_MAX;
constexpr int EdaDataFile_NetRecord_SubnetRecord::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_FillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[2];
}
bool EdaDataFile_NetRecord_SubnetRecord_FillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_NetRecord_SubnetRecord_FillType EdaDataFile_NetRecord_SubnetRecord::SOLID;
constexpr EdaDataFile_NetRecord_SubnetRecord_FillType EdaDataFile_NetRecord_SubnetRecord::OUTLINE;
constexpr EdaDataFile_NetRecord_SubnetRecord_FillType EdaDataFile_NetRecord_SubnetRecord::FillType_MIN;
constexpr EdaDataFile_NetRecord_SubnetRecord_FillType EdaDataFile_NetRecord_SubnetRecord::FillType_MAX;
constexpr int EdaDataFile_NetRecord_SubnetRecord::FillType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_CutoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[3];
}
bool EdaDataFile_NetRecord_SubnetRecord_CutoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::CIRCLE;
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::RECTANGLE;
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::OCTAGON;
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::EXACT;
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::CutoutType_MIN;
constexpr EdaDataFile_NetRecord_SubnetRecord_CutoutType EdaDataFile_NetRecord_SubnetRecord::CutoutType_MAX;
constexpr int EdaDataFile_NetRecord_SubnetRecord::CutoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[4];
}
bool EdaDataFile_PackageRecord_PinRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::THROUGH_HOLE;
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::BLIND;
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::SURFACE;
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::Type_MIN;
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::Type_MAX;
constexpr int EdaDataFile_PackageRecord_PinRecord::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[5];
}
bool EdaDataFile_PackageRecord_PinRecord_ElectricalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::ELECTRICAL;
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::NON_ELECTRICAL;
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::UNDEFINED;
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::ElectricalType_MIN;
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::ElectricalType_MAX;
constexpr int EdaDataFile_PackageRecord_PinRecord::ElectricalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_MountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[6];
}
bool EdaDataFile_PackageRecord_PinRecord_MountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::SMT;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::RECOMMENDED_SMT_PAD;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::MT_THROUGH_HOLE;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::RECOMMENDED_THROUGH_HOLE;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::PRESSFIT;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::NON_BOARD;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::HOLE;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::MT_UNDEFINED;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::MountType_MIN;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::MountType_MAX;
constexpr int EdaDataFile_PackageRecord_PinRecord::MountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_BoardSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_edadatafile_2eproto);
  return file_level_enum_descriptors_edadatafile_2eproto[7];
}
bool EdaDataFile_BoardSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdaDataFile_BoardSide EdaDataFile::TOP;
constexpr EdaDataFile_BoardSide EdaDataFile::BOTTOM;
constexpr EdaDataFile_BoardSide EdaDataFile::BoardSide_MIN;
constexpr EdaDataFile_BoardSide EdaDataFile::BoardSide_MAX;
constexpr int EdaDataFile::BoardSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EdaDataFile_PropertyRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_PropertyRecord>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EdaDataFile_PropertyRecord::EdaDataFile_PropertyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.PropertyRecord)
}
EdaDataFile_PropertyRecord::EdaDataFile_PropertyRecord(const EdaDataFile_PropertyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_PropertyRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.floatvalues_){from._impl_.floatvalues_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.PropertyRecord)
}

inline void EdaDataFile_PropertyRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.floatvalues_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdaDataFile_PropertyRecord::~EdaDataFile_PropertyRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.PropertyRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_PropertyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.floatvalues_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void EdaDataFile_PropertyRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_PropertyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.PropertyRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floatvalues_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_PropertyRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.PropertyRecord.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.PropertyRecord.value"));
        } else
          goto handle_unusual;
        continue;
      // repeated float floatValues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_floatvalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_PropertyRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.PropertyRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.PropertyRecord.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.PropertyRecord.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // repeated float floatValues = 3;
  if (this->_internal_floatvalues_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_floatvalues(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.PropertyRecord)
  return target;
}

size_t EdaDataFile_PropertyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.PropertyRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floatValues = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatvalues_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_PropertyRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_PropertyRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_PropertyRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_PropertyRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_PropertyRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_PropertyRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.PropertyRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.floatvalues_.MergeFrom(from._impl_.floatvalues_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_PropertyRecord::CopyFrom(const EdaDataFile_PropertyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.PropertyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_PropertyRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_PropertyRecord::InternalSwap(EdaDataFile_PropertyRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.floatvalues_.InternalSwap(&other->_impl_.floatvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_PropertyRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[0]);
}

// ===================================================================

class EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layernumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_featurenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
}
EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.layernumber_){}
    , decltype(_impl_.featurenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.featurenumber_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.featurenumber_));
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
}

inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.layernumber_){0u}
    , decltype(_impl_.featurenumber_){0u}
  };
}

EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::~EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.featurenumber_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.featurenumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layerNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_layernumber(&has_bits);
          _impl_.layernumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featureNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_featurenumber(&has_bits);
          _impl_.featurenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.Type type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 layerNumber = 2;
  if (_internal_has_layernumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_layernumber(), target);
  }

  // optional uint32 featureNumber = 3;
  if (_internal_has_featurenumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_featurenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  return target;
}

size_t EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.Type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 layerNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layernumber());
    }

    // optional uint32 featureNumber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_featurenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.layernumber_ = from._impl_.layernumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.featurenumber_ = from._impl_.featurenumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::CopyFrom(const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::InternalSwap(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_.featurenumber_)
      + sizeof(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_impl_.featurenumber_)
      - PROTOBUF_FIELD_OFFSET(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[1]);
}

// ===================================================================

class EdaDataFile_NetRecord_SubnetRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_NetRecord_SubnetRecord>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cutouttype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fillsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_componentnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_toeprintnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

EdaDataFile_NetRecord_SubnetRecord::EdaDataFile_NetRecord_SubnetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
}
EdaDataFile_NetRecord_SubnetRecord::EdaDataFile_NetRecord_SubnetRecord(const EdaDataFile_NetRecord_SubnetRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_NetRecord_SubnetRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featureidrecords_){from._impl_.featureidrecords_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.filltype_){}
    , decltype(_impl_.cutouttype_){}
    , decltype(_impl_.fillsize_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.componentnumber_){}
    , decltype(_impl_.toeprintnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.toeprintnumber_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.toeprintnumber_));
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
}

inline void EdaDataFile_NetRecord_SubnetRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.featureidrecords_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.filltype_){0}
    , decltype(_impl_.cutouttype_){0}
    , decltype(_impl_.fillsize_){0}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.componentnumber_){0u}
    , decltype(_impl_.toeprintnumber_){0u}
  };
}

EdaDataFile_NetRecord_SubnetRecord::~EdaDataFile_NetRecord_SubnetRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_NetRecord_SubnetRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.featureidrecords_.~RepeatedPtrField();
}

void EdaDataFile_NetRecord_SubnetRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_NetRecord_SubnetRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.featureidrecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.toeprintnumber_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.toeprintnumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_NetRecord_SubnetRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord featureIdRecords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featureidrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FillType fillType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filltype(static_cast<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FillType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.CutoutType cutoutType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cutouttype(static_cast<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_CutoutType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional float fillSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_fillsize(&has_bits);
          _impl_.fillsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.BoardSide side = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::odbdesign::proto::EdaDataFile_BoardSide>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 componentNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_componentnumber(&has_bits);
          _impl_.componentnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 toeprintNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_toeprintnumber(&has_bits);
          _impl_.toeprintnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_NetRecord_SubnetRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.Type type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord featureIdRecords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_featureidrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_featureidrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FillType fillType = 3;
  if (_internal_has_filltype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_filltype(), target);
  }

  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.CutoutType cutoutType = 4;
  if (_internal_has_cutouttype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cutouttype(), target);
  }

  // optional float fillSize = 5;
  if (_internal_has_fillsize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fillsize(), target);
  }

  // optional .odbdesign.proto.EdaDataFile.BoardSide side = 6;
  if (_internal_has_side()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_side(), target);
  }

  // optional uint32 componentNumber = 7;
  if (_internal_has_componentnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_componentnumber(), target);
  }

  // optional uint32 toeprintNumber = 8;
  if (_internal_has_toeprintnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_toeprintnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  return target;
}

size_t EdaDataFile_NetRecord_SubnetRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord featureIdRecords = 2;
  total_size += 1UL * this->_internal_featureidrecords_size();
  for (const auto& msg : this->_impl_.featureidrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.Type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FillType fillType = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_filltype());
    }

    // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.CutoutType cutoutType = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cutouttype());
    }

    // optional float fillSize = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .odbdesign.proto.EdaDataFile.BoardSide side = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
    }

    // optional uint32 componentNumber = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_componentnumber());
    }

    // optional uint32 toeprintNumber = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toeprintnumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_NetRecord_SubnetRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_NetRecord_SubnetRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_NetRecord_SubnetRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_NetRecord_SubnetRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_NetRecord_SubnetRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_NetRecord_SubnetRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.featureidrecords_.MergeFrom(from._impl_.featureidrecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.filltype_ = from._impl_.filltype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cutouttype_ = from._impl_.cutouttype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fillsize_ = from._impl_.fillsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.side_ = from._impl_.side_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.componentnumber_ = from._impl_.componentnumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.toeprintnumber_ = from._impl_.toeprintnumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_NetRecord_SubnetRecord::CopyFrom(const EdaDataFile_NetRecord_SubnetRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_NetRecord_SubnetRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_NetRecord_SubnetRecord::InternalSwap(EdaDataFile_NetRecord_SubnetRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.featureidrecords_.InternalSwap(&other->_impl_.featureidrecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdaDataFile_NetRecord_SubnetRecord, _impl_.toeprintnumber_)
      + sizeof(EdaDataFile_NetRecord_SubnetRecord::_impl_.toeprintnumber_)
      - PROTOBUF_FIELD_OFFSET(EdaDataFile_NetRecord_SubnetRecord, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_NetRecord_SubnetRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[2]);
}

// ===================================================================

class EdaDataFile_NetRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_NetRecord>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attributesidstring(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EdaDataFile_NetRecord::EdaDataFile_NetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.NetRecord)
}
EdaDataFile_NetRecord::EdaDataFile_NetRecord(const EdaDataFile_NetRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_NetRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subnetrecords_){from._impl_.subnetrecords_}
    , decltype(_impl_.propertyrecords_){from._impl_.propertyrecords_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attributesidstring_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attributesidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attributesidstring()) {
    _this->_impl_.attributesidstring_.Set(from._internal_attributesidstring(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.NetRecord)
}

inline void EdaDataFile_NetRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subnetrecords_){arena}
    , decltype(_impl_.propertyrecords_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attributesidstring_){}
    , decltype(_impl_.index_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attributesidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdaDataFile_NetRecord::~EdaDataFile_NetRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.NetRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_NetRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subnetrecords_.~RepeatedPtrField();
  _impl_.propertyrecords_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.attributesidstring_.Destroy();
}

void EdaDataFile_NetRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_NetRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.NetRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subnetrecords_.Clear();
  _impl_.propertyrecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attributesidstring_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_NetRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.NetRecord.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string attributesIdString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attributesidstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.NetRecord.attributesIdString"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord subnetRecords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subnetrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_NetRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.NetRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.NetRecord.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string attributesIdString = 2;
  if (_internal_has_attributesidstring()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attributesidstring().data(), static_cast<int>(this->_internal_attributesidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.NetRecord.attributesIdString");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attributesidstring(), target);
  }

  // optional uint32 index = 3;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord subnetRecords = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subnetrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_subnetrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_propertyrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_propertyrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.NetRecord)
  return target;
}

size_t EdaDataFile_NetRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.NetRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord subnetRecords = 4;
  total_size += 1UL * this->_internal_subnetrecords_size();
  for (const auto& msg : this->_impl_.subnetrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 5;
  total_size += 1UL * this->_internal_propertyrecords_size();
  for (const auto& msg : this->_impl_.propertyrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string attributesIdString = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributesidstring());
    }

    // optional uint32 index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_NetRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_NetRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_NetRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_NetRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_NetRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_NetRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.NetRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subnetrecords_.MergeFrom(from._impl_.subnetrecords_);
  _this->_impl_.propertyrecords_.MergeFrom(from._impl_.propertyrecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attributesidstring(from._internal_attributesidstring());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_NetRecord::CopyFrom(const EdaDataFile_NetRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.NetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_NetRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_NetRecord::InternalSwap(EdaDataFile_NetRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subnetrecords_.InternalSwap(&other->_impl_.subnetrecords_);
  _impl_.propertyrecords_.InternalSwap(&other->_impl_.propertyrecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributesidstring_, lhs_arena,
      &other->_impl_.attributesidstring_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_NetRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[3]);
}

// ===================================================================

EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse() {}
EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::MergeFrom(const EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[4]);
}

// ===================================================================

class EdaDataFile_PackageRecord_PinRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_PackageRecord_PinRecord>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ycenter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_finishedholesize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_electricaltype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mounttype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

EdaDataFile_PackageRecord_PinRecord::EdaDataFile_PackageRecord_PinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
}
EdaDataFile_PackageRecord_PinRecord::EdaDataFile_PackageRecord_PinRecord(const EdaDataFile_PackageRecord_PinRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_PackageRecord_PinRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.xcenter_){}
    , decltype(_impl_.ycenter_){}
    , decltype(_impl_.finishedholesize_){}
    , decltype(_impl_.electricaltype_){}
    , decltype(_impl_.mounttype_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
}

inline void EdaDataFile_PackageRecord_PinRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.xcenter_){0}
    , decltype(_impl_.ycenter_){0}
    , decltype(_impl_.finishedholesize_){0}
    , decltype(_impl_.electricaltype_){0}
    , decltype(_impl_.mounttype_){0}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.index_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdaDataFile_PackageRecord_PinRecord::~EdaDataFile_PackageRecord_PinRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_PackageRecord_PinRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EdaDataFile_PackageRecord_PinRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_PackageRecord_PinRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.id_));
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_PackageRecord_PinRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name"));
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional float xCenter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xcenter(&has_bits);
          _impl_.xcenter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yCenter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_ycenter(&has_bits);
          _impl_.ycenter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float finishedHoleSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_finishedholesize(&has_bits);
          _impl_.finishedholesize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.ElectricalType electricalType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_electricaltype(static_cast<::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.MountType mountType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mounttype(static_cast<::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_PackageRecord_PinRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.Type type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional float xCenter = 3;
  if (_internal_has_xcenter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xcenter(), target);
  }

  // optional float yCenter = 4;
  if (_internal_has_ycenter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ycenter(), target);
  }

  // optional float finishedHoleSize = 5;
  if (_internal_has_finishedholesize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_finishedholesize(), target);
  }

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.ElectricalType electricalType = 6;
  if (_internal_has_electricaltype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_electricaltype(), target);
  }

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.MountType mountType = 7;
  if (_internal_has_mounttype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mounttype(), target);
  }

  // optional uint32 id = 8;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_id(), target);
  }

  // optional uint32 index = 9;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  return target;
}

size_t EdaDataFile_PackageRecord_PinRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float xCenter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yCenter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float finishedHoleSize = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.ElectricalType electricalType = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_electricaltype());
    }

    // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.MountType mountType = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mounttype());
    }

    // optional uint32 id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  // optional uint32 index = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_PackageRecord_PinRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_PackageRecord_PinRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_PackageRecord_PinRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_PackageRecord_PinRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_PackageRecord_PinRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_PackageRecord_PinRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.xcenter_ = from._impl_.xcenter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ycenter_ = from._impl_.ycenter_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.finishedholesize_ = from._impl_.finishedholesize_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.electricaltype_ = from._impl_.electricaltype_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mounttype_ = from._impl_.mounttype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_PackageRecord_PinRecord::CopyFrom(const EdaDataFile_PackageRecord_PinRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_PackageRecord_PinRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_PackageRecord_PinRecord::InternalSwap(EdaDataFile_PackageRecord_PinRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdaDataFile_PackageRecord_PinRecord, _impl_.index_)
      + sizeof(EdaDataFile_PackageRecord_PinRecord::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(EdaDataFile_PackageRecord_PinRecord, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_PackageRecord_PinRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[5]);
}

// ===================================================================

class EdaDataFile_PackageRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile_PackageRecord>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_xmax(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ymax(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attributesidstring(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EdaDataFile_PackageRecord::EdaDataFile_PackageRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &EdaDataFile_PackageRecord::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile.PackageRecord)
}
EdaDataFile_PackageRecord::EdaDataFile_PackageRecord(const EdaDataFile_PackageRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile_PackageRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinrecords_){from._impl_.pinrecords_}
    , /*decltype(_impl_.pinrecordsbyname_)*/{}
    , decltype(_impl_.propertyrecords_){from._impl_.propertyrecords_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attributesidstring_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.xmin_){}
    , decltype(_impl_.ymin_){}
    , decltype(_impl_.xmax_){}
    , decltype(_impl_.ymax_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pinrecordsbyname_.MergeFrom(from._impl_.pinrecordsbyname_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attributesidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attributesidstring()) {
    _this->_impl_.attributesidstring_.Set(from._internal_attributesidstring(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ymax_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.ymax_));
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile.PackageRecord)
}

inline void EdaDataFile_PackageRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinrecords_){arena}
    , /*decltype(_impl_.pinrecordsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.propertyrecords_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.attributesidstring_){}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.xmin_){0}
    , decltype(_impl_.ymin_){0}
    , decltype(_impl_.xmax_){0}
    , decltype(_impl_.ymax_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attributesidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdaDataFile_PackageRecord::~EdaDataFile_PackageRecord() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile.PackageRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void EdaDataFile_PackageRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pinrecords_.~RepeatedPtrField();
  _impl_.pinrecordsbyname_.Destruct();
  _impl_.pinrecordsbyname_.~MapField();
  _impl_.propertyrecords_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.attributesidstring_.Destroy();
}

void EdaDataFile_PackageRecord::ArenaDtor(void* object) {
  EdaDataFile_PackageRecord* _this = reinterpret_cast< EdaDataFile_PackageRecord* >(object);
  _this->_impl_.pinrecordsbyname_.Destruct();
}
void EdaDataFile_PackageRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile_PackageRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile.PackageRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pinrecords_.Clear();
  _impl_.pinrecordsbyname_.Clear();
  _impl_.propertyrecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attributesidstring_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ymax_) -
        reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.ymax_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile_PackageRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.PackageRecord.name"));
        } else
          goto handle_unusual;
        continue;
      // optional float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_pitch(&has_bits);
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xMin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xmin(&has_bits);
          _impl_.xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yMin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_ymin(&has_bits);
          _impl_.ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xMax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_xmax(&has_bits);
          _impl_.xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yMax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_ymax(&has_bits);
          _impl_.ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string attributesIdString = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_attributesidstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString"));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord pinRecords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pinrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord> pinRecordsByName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pinrecordsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile_PackageRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile.PackageRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.PackageRecord.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float pitch = 2;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // optional float xMin = 3;
  if (_internal_has_xmin()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xmin(), target);
  }

  // optional float yMin = 4;
  if (_internal_has_ymin()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ymin(), target);
  }

  // optional float xMax = 5;
  if (_internal_has_xmax()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_xmax(), target);
  }

  // optional float yMax = 6;
  if (_internal_has_ymax()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ymax(), target);
  }

  // optional string attributesIdString = 7;
  if (_internal_has_attributesidstring()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attributesidstring().data(), static_cast<int>(this->_internal_attributesidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_attributesidstring(), target);
  }

  // repeated .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord pinRecords = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pinrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_pinrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord> pinRecordsByName = 9;
  if (!this->_internal_pinrecordsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord>;
    using WireHelper = EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pinrecordsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "odbdesign.proto.EdaDataFile.PackageRecord.PinRecordsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_propertyrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_propertyrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile.PackageRecord)
  return target;
}

size_t EdaDataFile_PackageRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile.PackageRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord pinRecords = 8;
  total_size += 1UL * this->_internal_pinrecords_size();
  for (const auto& msg : this->_impl_.pinrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord> pinRecordsByName = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pinrecordsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >::const_iterator
      it = this->_internal_pinrecordsbyname().begin();
      it != this->_internal_pinrecordsbyname().end(); ++it) {
    total_size += EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 10;
  total_size += 1UL * this->_internal_propertyrecords_size();
  for (const auto& msg : this->_impl_.propertyrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string attributesIdString = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributesidstring());
    }

    // optional float pitch = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float xMin = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float yMin = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float xMax = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float yMax = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile_PackageRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile_PackageRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile_PackageRecord::GetClassData() const { return &_class_data_; }


void EdaDataFile_PackageRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile_PackageRecord*>(&to_msg);
  auto& from = static_cast<const EdaDataFile_PackageRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile.PackageRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pinrecords_.MergeFrom(from._impl_.pinrecords_);
  _this->_impl_.pinrecordsbyname_.MergeFrom(from._impl_.pinrecordsbyname_);
  _this->_impl_.propertyrecords_.MergeFrom(from._impl_.propertyrecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attributesidstring(from._internal_attributesidstring());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pitch_ = from._impl_.pitch_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.xmin_ = from._impl_.xmin_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ymin_ = from._impl_.ymin_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.xmax_ = from._impl_.xmax_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ymax_ = from._impl_.ymax_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile_PackageRecord::CopyFrom(const EdaDataFile_PackageRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile.PackageRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile_PackageRecord::IsInitialized() const {
  return true;
}

void EdaDataFile_PackageRecord::InternalSwap(EdaDataFile_PackageRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pinrecords_.InternalSwap(&other->_impl_.pinrecords_);
  _impl_.pinrecordsbyname_.InternalSwap(&other->_impl_.pinrecordsbyname_);
  _impl_.propertyrecords_.InternalSwap(&other->_impl_.propertyrecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributesidstring_, lhs_arena,
      &other->_impl_.attributesidstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdaDataFile_PackageRecord, _impl_.ymax_)
      + sizeof(EdaDataFile_PackageRecord::_impl_.ymax_)
      - PROTOBUF_FIELD_OFFSET(EdaDataFile_PackageRecord, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_PackageRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[6]);
}

// ===================================================================

EdaDataFile_NetRecordsByNameEntry_DoNotUse::EdaDataFile_NetRecordsByNameEntry_DoNotUse() {}
EdaDataFile_NetRecordsByNameEntry_DoNotUse::EdaDataFile_NetRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EdaDataFile_NetRecordsByNameEntry_DoNotUse::MergeFrom(const EdaDataFile_NetRecordsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_NetRecordsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[7]);
}

// ===================================================================

EdaDataFile_PackageRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecordsByNameEntry_DoNotUse() {}
EdaDataFile_PackageRecordsByNameEntry_DoNotUse::EdaDataFile_PackageRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EdaDataFile_PackageRecordsByNameEntry_DoNotUse::MergeFrom(const EdaDataFile_PackageRecordsByNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile_PackageRecordsByNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[8]);
}

// ===================================================================

class EdaDataFile::_Internal {
 public:
  using HasBits = decltype(std::declval<EdaDataFile>()._impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EdaDataFile::EdaDataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &EdaDataFile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:odbdesign.proto.EdaDataFile)
}
EdaDataFile::EdaDataFile(const EdaDataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdaDataFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layernames_){from._impl_.layernames_}
    , decltype(_impl_.attributenames_){from._impl_.attributenames_}
    , decltype(_impl_.attributetextvalues_){from._impl_.attributetextvalues_}
    , decltype(_impl_.netrecords_){from._impl_.netrecords_}
    , /*decltype(_impl_.netrecordsbyname_)*/{}
    , decltype(_impl_.packagerecords_){from._impl_.packagerecords_}
    , /*decltype(_impl_.packagerecordsbyname_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.units_){}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.netrecordsbyname_.MergeFrom(from._impl_.netrecordsbyname_);
  _this->_impl_.packagerecordsbyname_.MergeFrom(from._impl_.packagerecordsbyname_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_units()) {
    _this->_impl_.units_.Set(from._internal_units(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:odbdesign.proto.EdaDataFile)
}

inline void EdaDataFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layernames_){arena}
    , decltype(_impl_.attributenames_){arena}
    , decltype(_impl_.attributetextvalues_){arena}
    , decltype(_impl_.netrecords_){arena}
    , /*decltype(_impl_.netrecordsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.packagerecords_){arena}
    , /*decltype(_impl_.packagerecordsbyname_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.units_){}
    , decltype(_impl_.source_){}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.units_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.units_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdaDataFile::~EdaDataFile() {
  // @@protoc_insertion_point(destructor:odbdesign.proto.EdaDataFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void EdaDataFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layernames_.~RepeatedPtrField();
  _impl_.attributenames_.~RepeatedPtrField();
  _impl_.attributetextvalues_.~RepeatedPtrField();
  _impl_.netrecords_.~RepeatedPtrField();
  _impl_.netrecordsbyname_.Destruct();
  _impl_.netrecordsbyname_.~MapField();
  _impl_.packagerecords_.~RepeatedPtrField();
  _impl_.packagerecordsbyname_.Destruct();
  _impl_.packagerecordsbyname_.~MapField();
  _impl_.path_.Destroy();
  _impl_.units_.Destroy();
  _impl_.source_.Destroy();
}

void EdaDataFile::ArenaDtor(void* object) {
  EdaDataFile* _this = reinterpret_cast< EdaDataFile* >(object);
  _this->_impl_.netrecordsbyname_.Destruct();
  _this->_impl_.packagerecordsbyname_.Destruct();
}
void EdaDataFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdaDataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:odbdesign.proto.EdaDataFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layernames_.Clear();
  _impl_.attributenames_.Clear();
  _impl_.attributetextvalues_.Clear();
  _impl_.netrecords_.Clear();
  _impl_.netrecordsbyname_.Clear();
  _impl_.packagerecords_.Clear();
  _impl_.packagerecordsbyname_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdaDataFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.path"));
        } else
          goto handle_unusual;
        continue;
      // optional string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.units"));
        } else
          goto handle_unusual;
        continue;
      // optional string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.source"));
        } else
          goto handle_unusual;
        continue;
      // repeated string layerNames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_layernames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.layerNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string attributeNames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.attributeNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string attributeTextValues = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributetextvalues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "odbdesign.proto.EdaDataFile.attributeTextValues"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.NetRecord netRecords = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_netrecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .odbdesign.proto.EdaDataFile.NetRecord> netRecordsByName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.netrecordsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .odbdesign.proto.EdaDataFile.PackageRecord packageRecords = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packagerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .odbdesign.proto.EdaDataFile.PackageRecord> packageRecordsByName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.packagerecordsbyname_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdaDataFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:odbdesign.proto.EdaDataFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string path = 1;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional string units = 2;
  if (_internal_has_units()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // optional string source = 3;
  if (_internal_has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // repeated string layerNames = 4;
  for (int i = 0, n = this->_internal_layernames_size(); i < n; i++) {
    const auto& s = this->_internal_layernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.layerNames");
    target = stream->WriteString(4, s, target);
  }

  // repeated string attributeNames = 5;
  for (int i = 0, n = this->_internal_attributenames_size(); i < n; i++) {
    const auto& s = this->_internal_attributenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.attributeNames");
    target = stream->WriteString(5, s, target);
  }

  // repeated string attributeTextValues = 6;
  for (int i = 0, n = this->_internal_attributetextvalues_size(); i < n; i++) {
    const auto& s = this->_internal_attributetextvalues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "odbdesign.proto.EdaDataFile.attributeTextValues");
    target = stream->WriteString(6, s, target);
  }

  // repeated .odbdesign.proto.EdaDataFile.NetRecord netRecords = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_netrecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_netrecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .odbdesign.proto.EdaDataFile.NetRecord> netRecordsByName = 8;
  if (!this->_internal_netrecordsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::odbdesign::proto::EdaDataFile_NetRecord>;
    using WireHelper = EdaDataFile_NetRecordsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_netrecordsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "odbdesign.proto.EdaDataFile.NetRecordsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .odbdesign.proto.EdaDataFile.PackageRecord packageRecords = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packagerecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_packagerecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord> packageRecordsByName = 10;
  if (!this->_internal_packagerecordsbyname().empty()) {
    using MapType = ::_pb::Map<std::string, ::odbdesign::proto::EdaDataFile_PackageRecord>;
    using WireHelper = EdaDataFile_PackageRecordsByNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_packagerecordsbyname();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "odbdesign.proto.EdaDataFile.PackageRecordsByNameEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odbdesign.proto.EdaDataFile)
  return target;
}

size_t EdaDataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odbdesign.proto.EdaDataFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layerNames = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.layernames_.size());
  for (int i = 0, n = _impl_.layernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.layernames_.Get(i));
  }

  // repeated string attributeNames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributenames_.size());
  for (int i = 0, n = _impl_.attributenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributenames_.Get(i));
  }

  // repeated string attributeTextValues = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributetextvalues_.size());
  for (int i = 0, n = _impl_.attributetextvalues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributetextvalues_.Get(i));
  }

  // repeated .odbdesign.proto.EdaDataFile.NetRecord netRecords = 7;
  total_size += 1UL * this->_internal_netrecords_size();
  for (const auto& msg : this->_impl_.netrecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .odbdesign.proto.EdaDataFile.NetRecord> netRecordsByName = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_netrecordsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >::const_iterator
      it = this->_internal_netrecordsbyname().begin();
      it != this->_internal_netrecordsbyname().end(); ++it) {
    total_size += EdaDataFile_NetRecordsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .odbdesign.proto.EdaDataFile.PackageRecord packageRecords = 9;
  total_size += 1UL * this->_internal_packagerecords_size();
  for (const auto& msg : this->_impl_.packagerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord> packageRecordsByName = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packagerecordsbyname_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >::const_iterator
      it = this->_internal_packagerecordsbyname().begin();
      it != this->_internal_packagerecordsbyname().end(); ++it) {
    total_size += EdaDataFile_PackageRecordsByNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string units = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdaDataFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdaDataFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdaDataFile::GetClassData() const { return &_class_data_; }


void EdaDataFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdaDataFile*>(&to_msg);
  auto& from = static_cast<const EdaDataFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odbdesign.proto.EdaDataFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layernames_.MergeFrom(from._impl_.layernames_);
  _this->_impl_.attributenames_.MergeFrom(from._impl_.attributenames_);
  _this->_impl_.attributetextvalues_.MergeFrom(from._impl_.attributetextvalues_);
  _this->_impl_.netrecords_.MergeFrom(from._impl_.netrecords_);
  _this->_impl_.netrecordsbyname_.MergeFrom(from._impl_.netrecordsbyname_);
  _this->_impl_.packagerecords_.MergeFrom(from._impl_.packagerecords_);
  _this->_impl_.packagerecordsbyname_.MergeFrom(from._impl_.packagerecordsbyname_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_source(from._internal_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdaDataFile::CopyFrom(const EdaDataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odbdesign.proto.EdaDataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdaDataFile::IsInitialized() const {
  return true;
}

void EdaDataFile::InternalSwap(EdaDataFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layernames_.InternalSwap(&other->_impl_.layernames_);
  _impl_.attributenames_.InternalSwap(&other->_impl_.attributenames_);
  _impl_.attributetextvalues_.InternalSwap(&other->_impl_.attributetextvalues_);
  _impl_.netrecords_.InternalSwap(&other->_impl_.netrecords_);
  _impl_.netrecordsbyname_.InternalSwap(&other->_impl_.netrecordsbyname_);
  _impl_.packagerecords_.InternalSwap(&other->_impl_.packagerecords_);
  _impl_.packagerecordsbyname_.InternalSwap(&other->_impl_.packagerecordsbyname_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.units_, lhs_arena,
      &other->_impl_.units_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EdaDataFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edadatafile_2eproto_getter, &descriptor_table_edadatafile_2eproto_once,
      file_level_metadata_edadatafile_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace odbdesign
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_PropertyRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_PropertyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_PropertyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_NetRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_NetRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_NetRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_PackageRecord*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_PackageRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_PackageRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::odbdesign::proto::EdaDataFile*
Arena::CreateMaybeMessage< ::odbdesign::proto::EdaDataFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::odbdesign::proto::EdaDataFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
