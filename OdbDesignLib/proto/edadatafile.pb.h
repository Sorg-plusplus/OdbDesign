// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edadatafile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_edadatafile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_edadatafile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_edadatafile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_edadatafile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_edadatafile_2eproto;
namespace odbdesign {
namespace proto {
class EdaDataFile;
struct EdaDataFileDefaultTypeInternal;
extern EdaDataFileDefaultTypeInternal _EdaDataFile_default_instance_;
class EdaDataFile_NetRecord;
struct EdaDataFile_NetRecordDefaultTypeInternal;
extern EdaDataFile_NetRecordDefaultTypeInternal _EdaDataFile_NetRecord_default_instance_;
class EdaDataFile_NetRecord_PlaneSubnetRecord;
struct EdaDataFile_NetRecord_PlaneSubnetRecordDefaultTypeInternal;
extern EdaDataFile_NetRecord_PlaneSubnetRecordDefaultTypeInternal _EdaDataFile_NetRecord_PlaneSubnetRecord_default_instance_;
class EdaDataFile_NetRecord_SubnetRecord;
struct EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal;
extern EdaDataFile_NetRecord_SubnetRecordDefaultTypeInternal _EdaDataFile_NetRecord_SubnetRecord_default_instance_;
class EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord;
struct EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal;
extern EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecordDefaultTypeInternal _EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_default_instance_;
class EdaDataFile_NetRecord_ToeprintSubnetRecord;
struct EdaDataFile_NetRecord_ToeprintSubnetRecordDefaultTypeInternal;
extern EdaDataFile_NetRecord_ToeprintSubnetRecordDefaultTypeInternal _EdaDataFile_NetRecord_ToeprintSubnetRecord_default_instance_;
class EdaDataFile_NetRecordsByNameEntry_DoNotUse;
struct EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal;
extern EdaDataFile_NetRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_NetRecordsByNameEntry_DoNotUse_default_instance_;
class EdaDataFile_PackageRecord;
struct EdaDataFile_PackageRecordDefaultTypeInternal;
extern EdaDataFile_PackageRecordDefaultTypeInternal _EdaDataFile_PackageRecord_default_instance_;
class EdaDataFile_PackageRecord_PinRecord;
struct EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal;
extern EdaDataFile_PackageRecord_PinRecordDefaultTypeInternal _EdaDataFile_PackageRecord_PinRecord_default_instance_;
class EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse;
struct EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal;
extern EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse_default_instance_;
class EdaDataFile_PackageRecordsByNameEntry_DoNotUse;
struct EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal;
extern EdaDataFile_PackageRecordsByNameEntry_DoNotUseDefaultTypeInternal _EdaDataFile_PackageRecordsByNameEntry_DoNotUse_default_instance_;
class EdaDataFile_PropertyRecord;
struct EdaDataFile_PropertyRecordDefaultTypeInternal;
extern EdaDataFile_PropertyRecordDefaultTypeInternal _EdaDataFile_PropertyRecord_default_instance_;
}  // namespace proto
}  // namespace odbdesign
PROTOBUF_NAMESPACE_OPEN
template<> ::odbdesign::proto::EdaDataFile* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecord_ToeprintSubnetRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecord_ToeprintSubnetRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_NetRecordsByNameEntry_DoNotUse>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_PackageRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_PackageRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_PackageRecordsByNameEntry_DoNotUse>(Arena*);
template<> ::odbdesign::proto::EdaDataFile_PropertyRecord* Arena::CreateMaybeMessage<::odbdesign::proto::EdaDataFile_PropertyRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace odbdesign {
namespace proto {

enum EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type : int {
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_COPPER = 0,
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_LAMINATE = 1,
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_HOLE = 2,
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_IsValid(int value);
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_MIN = EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_COPPER;
constexpr EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_MAX = EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_HOLE;
constexpr int EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_ARRAYSIZE = EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor();
template<typename T>
inline const std::string& EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor(), enum_t_value);
}
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type>(
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor(), name, value);
}
enum EdaDataFile_NetRecord_SubnetRecord_Type : int {
  EdaDataFile_NetRecord_SubnetRecord_Type_VIA = 0,
  EdaDataFile_NetRecord_SubnetRecord_Type_TRACE = 1,
  EdaDataFile_NetRecord_SubnetRecord_Type_PLANE = 2,
  EdaDataFile_NetRecord_SubnetRecord_Type_TOEPRINT = 3,
  EdaDataFile_NetRecord_SubnetRecord_Type_EdaDataFile_NetRecord_SubnetRecord_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_NetRecord_SubnetRecord_Type_EdaDataFile_NetRecord_SubnetRecord_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_NetRecord_SubnetRecord_Type_IsValid(int value);
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord_Type_Type_MIN = EdaDataFile_NetRecord_SubnetRecord_Type_VIA;
constexpr EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord_Type_Type_MAX = EdaDataFile_NetRecord_SubnetRecord_Type_TOEPRINT;
constexpr int EdaDataFile_NetRecord_SubnetRecord_Type_Type_ARRAYSIZE = EdaDataFile_NetRecord_SubnetRecord_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_SubnetRecord_Type_descriptor();
template<typename T>
inline const std::string& EdaDataFile_NetRecord_SubnetRecord_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_NetRecord_SubnetRecord_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_NetRecord_SubnetRecord_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_NetRecord_SubnetRecord_Type_descriptor(), enum_t_value);
}
inline bool EdaDataFile_NetRecord_SubnetRecord_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_NetRecord_SubnetRecord_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_NetRecord_SubnetRecord_Type>(
    EdaDataFile_NetRecord_SubnetRecord_Type_descriptor(), name, value);
}
enum EdaDataFile_NetRecord_PlaneSubnetRecord_FillType : int {
  EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_SOLID = 0,
  EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_OUTLINE = 1,
  EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_IsValid(int value);
constexpr EdaDataFile_NetRecord_PlaneSubnetRecord_FillType EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_MIN = EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_SOLID;
constexpr EdaDataFile_NetRecord_PlaneSubnetRecord_FillType EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_MAX = EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_OUTLINE;
constexpr int EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_ARRAYSIZE = EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_descriptor();
template<typename T>
inline const std::string& EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_NetRecord_PlaneSubnetRecord_FillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_descriptor(), enum_t_value);
}
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_NetRecord_PlaneSubnetRecord_FillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_NetRecord_PlaneSubnetRecord_FillType>(
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_descriptor(), name, value);
}
enum EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType : int {
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CIRCLE = 0,
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_RECTANGLE = 1,
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_OCTAGON = 2,
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_EXACT = 3,
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_IsValid(int value);
constexpr EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_MIN = EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CIRCLE;
constexpr EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_MAX = EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_EXACT;
constexpr int EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_ARRAYSIZE = EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_descriptor();
template<typename T>
inline const std::string& EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_descriptor(), enum_t_value);
}
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType>(
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_descriptor(), name, value);
}
enum EdaDataFile_PackageRecord_PinRecord_Type : int {
  EdaDataFile_PackageRecord_PinRecord_Type_THROUGH_HOLE = 0,
  EdaDataFile_PackageRecord_PinRecord_Type_BLIND = 1,
  EdaDataFile_PackageRecord_PinRecord_Type_SURFACE = 2,
  EdaDataFile_PackageRecord_PinRecord_Type_EdaDataFile_PackageRecord_PinRecord_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_PackageRecord_PinRecord_Type_EdaDataFile_PackageRecord_PinRecord_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_PackageRecord_PinRecord_Type_IsValid(int value);
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord_Type_Type_MIN = EdaDataFile_PackageRecord_PinRecord_Type_THROUGH_HOLE;
constexpr EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord_Type_Type_MAX = EdaDataFile_PackageRecord_PinRecord_Type_SURFACE;
constexpr int EdaDataFile_PackageRecord_PinRecord_Type_Type_ARRAYSIZE = EdaDataFile_PackageRecord_PinRecord_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_Type_descriptor();
template<typename T>
inline const std::string& EdaDataFile_PackageRecord_PinRecord_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_PackageRecord_PinRecord_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_PackageRecord_PinRecord_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_PackageRecord_PinRecord_Type_descriptor(), enum_t_value);
}
inline bool EdaDataFile_PackageRecord_PinRecord_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_PackageRecord_PinRecord_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_PackageRecord_PinRecord_Type>(
    EdaDataFile_PackageRecord_PinRecord_Type_descriptor(), name, value);
}
enum EdaDataFile_PackageRecord_PinRecord_ElectricalType : int {
  EdaDataFile_PackageRecord_PinRecord_ElectricalType_ELECTRICAL = 0,
  EdaDataFile_PackageRecord_PinRecord_ElectricalType_NON_ELECTRICAL = 1,
  EdaDataFile_PackageRecord_PinRecord_ElectricalType_UNDEFINED = 2,
  EdaDataFile_PackageRecord_PinRecord_ElectricalType_EdaDataFile_PackageRecord_PinRecord_ElectricalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_PackageRecord_PinRecord_ElectricalType_EdaDataFile_PackageRecord_PinRecord_ElectricalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_PackageRecord_PinRecord_ElectricalType_IsValid(int value);
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_MIN = EdaDataFile_PackageRecord_PinRecord_ElectricalType_ELECTRICAL;
constexpr EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_MAX = EdaDataFile_PackageRecord_PinRecord_ElectricalType_UNDEFINED;
constexpr int EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_ARRAYSIZE = EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor();
template<typename T>
inline const std::string& EdaDataFile_PackageRecord_PinRecord_ElectricalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_PackageRecord_PinRecord_ElectricalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_PackageRecord_PinRecord_ElectricalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor(), enum_t_value);
}
inline bool EdaDataFile_PackageRecord_PinRecord_ElectricalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_PackageRecord_PinRecord_ElectricalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_PackageRecord_PinRecord_ElectricalType>(
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor(), name, value);
}
enum EdaDataFile_PackageRecord_PinRecord_MountType : int {
  EdaDataFile_PackageRecord_PinRecord_MountType_SMT = 0,
  EdaDataFile_PackageRecord_PinRecord_MountType_RECOMMENDED_SMT_PAD = 1,
  EdaDataFile_PackageRecord_PinRecord_MountType_MT_THROUGH_HOLE = 2,
  EdaDataFile_PackageRecord_PinRecord_MountType_RECOMMENDED_THROUGH_HOLE = 3,
  EdaDataFile_PackageRecord_PinRecord_MountType_PRESSFIT = 4,
  EdaDataFile_PackageRecord_PinRecord_MountType_NON_BOARD = 5,
  EdaDataFile_PackageRecord_PinRecord_MountType_HOLE = 6,
  EdaDataFile_PackageRecord_PinRecord_MountType_MT_UNDEFINED = 7,
  EdaDataFile_PackageRecord_PinRecord_MountType_EdaDataFile_PackageRecord_PinRecord_MountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_PackageRecord_PinRecord_MountType_EdaDataFile_PackageRecord_PinRecord_MountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_PackageRecord_PinRecord_MountType_IsValid(int value);
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord_MountType_MountType_MIN = EdaDataFile_PackageRecord_PinRecord_MountType_SMT;
constexpr EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord_MountType_MountType_MAX = EdaDataFile_PackageRecord_PinRecord_MountType_MT_UNDEFINED;
constexpr int EdaDataFile_PackageRecord_PinRecord_MountType_MountType_ARRAYSIZE = EdaDataFile_PackageRecord_PinRecord_MountType_MountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_PackageRecord_PinRecord_MountType_descriptor();
template<typename T>
inline const std::string& EdaDataFile_PackageRecord_PinRecord_MountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_PackageRecord_PinRecord_MountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_PackageRecord_PinRecord_MountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_PackageRecord_PinRecord_MountType_descriptor(), enum_t_value);
}
inline bool EdaDataFile_PackageRecord_PinRecord_MountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_PackageRecord_PinRecord_MountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_PackageRecord_PinRecord_MountType>(
    EdaDataFile_PackageRecord_PinRecord_MountType_descriptor(), name, value);
}
enum EdaDataFile_BoardSide : int {
  EdaDataFile_BoardSide_TOP = 0,
  EdaDataFile_BoardSide_BOTTOM = 1,
  EdaDataFile_BoardSide_EdaDataFile_BoardSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdaDataFile_BoardSide_EdaDataFile_BoardSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdaDataFile_BoardSide_IsValid(int value);
constexpr EdaDataFile_BoardSide EdaDataFile_BoardSide_BoardSide_MIN = EdaDataFile_BoardSide_TOP;
constexpr EdaDataFile_BoardSide EdaDataFile_BoardSide_BoardSide_MAX = EdaDataFile_BoardSide_BOTTOM;
constexpr int EdaDataFile_BoardSide_BoardSide_ARRAYSIZE = EdaDataFile_BoardSide_BoardSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdaDataFile_BoardSide_descriptor();
template<typename T>
inline const std::string& EdaDataFile_BoardSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdaDataFile_BoardSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdaDataFile_BoardSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdaDataFile_BoardSide_descriptor(), enum_t_value);
}
inline bool EdaDataFile_BoardSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdaDataFile_BoardSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdaDataFile_BoardSide>(
    EdaDataFile_BoardSide_descriptor(), name, value);
}
// ===================================================================

class EdaDataFile_PropertyRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.PropertyRecord) */ {
 public:
  inline EdaDataFile_PropertyRecord() : EdaDataFile_PropertyRecord(nullptr) {}
  ~EdaDataFile_PropertyRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_PropertyRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_PropertyRecord(const EdaDataFile_PropertyRecord& from);
  EdaDataFile_PropertyRecord(EdaDataFile_PropertyRecord&& from) noexcept
    : EdaDataFile_PropertyRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_PropertyRecord& operator=(const EdaDataFile_PropertyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_PropertyRecord& operator=(EdaDataFile_PropertyRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_PropertyRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_PropertyRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_PropertyRecord*>(
               &_EdaDataFile_PropertyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EdaDataFile_PropertyRecord& a, EdaDataFile_PropertyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_PropertyRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_PropertyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_PropertyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_PropertyRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_PropertyRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_PropertyRecord& from) {
    EdaDataFile_PropertyRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_PropertyRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.PropertyRecord";
  }
  protected:
  explicit EdaDataFile_PropertyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValuesFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated float floatValues = 3;
  int floatvalues_size() const;
  private:
  int _internal_floatvalues_size() const;
  public:
  void clear_floatvalues();
  private:
  float _internal_floatvalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatvalues() const;
  void _internal_add_floatvalues(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatvalues();
  public:
  float floatvalues(int index) const;
  void set_floatvalues(int index, float value);
  void add_floatvalues(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatvalues();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.PropertyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatvalues_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord) */ {
 public:
  inline EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord() : EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(nullptr) {}
  ~EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from);
  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord&& from) noexcept
    : EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& operator=(const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& operator=(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord*>(
               &_EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& a, EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& from) {
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord";
  }
  protected:
  explicit EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type Type;
  static constexpr Type COPPER =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_COPPER;
  static constexpr Type LAMINATE =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_LAMINATE;
  static constexpr Type HOLE =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_HOLE;
  static inline bool Type_IsValid(int value) {
    return EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kLayerNumberFieldNumber = 3,
    kFeatureNumberFieldNumber = 4,
  };
  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type type() const;
  void set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type value);
  private:
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type _internal_type() const;
  void _internal_set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type value);
  public:

  // optional uint32 layerNumber = 3;
  bool has_layernumber() const;
  private:
  bool _internal_has_layernumber() const;
  public:
  void clear_layernumber();
  uint32_t layernumber() const;
  void set_layernumber(uint32_t value);
  private:
  uint32_t _internal_layernumber() const;
  void _internal_set_layernumber(uint32_t value);
  public:

  // optional uint32 featureNumber = 4;
  bool has_featurenumber() const;
  private:
  bool _internal_has_featurenumber() const;
  public:
  void clear_featurenumber();
  uint32_t featurenumber() const;
  void set_featurenumber(uint32_t value);
  private:
  uint32_t _internal_featurenumber() const;
  void _internal_set_featurenumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    uint32_t layernumber_;
    uint32_t featurenumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecord_SubnetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord) */ {
 public:
  inline EdaDataFile_NetRecord_SubnetRecord() : EdaDataFile_NetRecord_SubnetRecord(nullptr) {}
  ~EdaDataFile_NetRecord_SubnetRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_SubnetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_NetRecord_SubnetRecord(const EdaDataFile_NetRecord_SubnetRecord& from);
  EdaDataFile_NetRecord_SubnetRecord(EdaDataFile_NetRecord_SubnetRecord&& from) noexcept
    : EdaDataFile_NetRecord_SubnetRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_NetRecord_SubnetRecord& operator=(const EdaDataFile_NetRecord_SubnetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_NetRecord_SubnetRecord& operator=(EdaDataFile_NetRecord_SubnetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_NetRecord_SubnetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_NetRecord_SubnetRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_NetRecord_SubnetRecord*>(
               &_EdaDataFile_NetRecord_SubnetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EdaDataFile_NetRecord_SubnetRecord& a, EdaDataFile_NetRecord_SubnetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_NetRecord_SubnetRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_NetRecord_SubnetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_NetRecord_SubnetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_NetRecord_SubnetRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_NetRecord_SubnetRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_NetRecord_SubnetRecord& from) {
    EdaDataFile_NetRecord_SubnetRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_NetRecord_SubnetRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord";
  }
  protected:
  explicit EdaDataFile_NetRecord_SubnetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord FeatureIdRecord;

  typedef EdaDataFile_NetRecord_SubnetRecord_Type Type;
  static constexpr Type VIA =
    EdaDataFile_NetRecord_SubnetRecord_Type_VIA;
  static constexpr Type TRACE =
    EdaDataFile_NetRecord_SubnetRecord_Type_TRACE;
  static constexpr Type PLANE =
    EdaDataFile_NetRecord_SubnetRecord_Type_PLANE;
  static constexpr Type TOEPRINT =
    EdaDataFile_NetRecord_SubnetRecord_Type_TOEPRINT;
  static inline bool Type_IsValid(int value) {
    return EdaDataFile_NetRecord_SubnetRecord_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EdaDataFile_NetRecord_SubnetRecord_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EdaDataFile_NetRecord_SubnetRecord_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EdaDataFile_NetRecord_SubnetRecord_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EdaDataFile_NetRecord_SubnetRecord_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EdaDataFile_NetRecord_SubnetRecord_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return EdaDataFile_NetRecord_SubnetRecord_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdRecordsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord featureIdRecords = 2;
  int featureidrecords_size() const;
  private:
  int _internal_featureidrecords_size() const;
  public:
  void clear_featureidrecords();
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* mutable_featureidrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >*
      mutable_featureidrecords();
  private:
  const ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& _internal_featureidrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* _internal_add_featureidrecords();
  public:
  const ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& featureidrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* add_featureidrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >&
      featureidrecords() const;

  // optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type type() const;
  void set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type value);
  private:
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type _internal_type() const;
  void _internal_set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord > featureidrecords_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecord_ToeprintSubnetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord) */ {
 public:
  inline EdaDataFile_NetRecord_ToeprintSubnetRecord() : EdaDataFile_NetRecord_ToeprintSubnetRecord(nullptr) {}
  ~EdaDataFile_NetRecord_ToeprintSubnetRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_ToeprintSubnetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_NetRecord_ToeprintSubnetRecord(const EdaDataFile_NetRecord_ToeprintSubnetRecord& from);
  EdaDataFile_NetRecord_ToeprintSubnetRecord(EdaDataFile_NetRecord_ToeprintSubnetRecord&& from) noexcept
    : EdaDataFile_NetRecord_ToeprintSubnetRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_NetRecord_ToeprintSubnetRecord& operator=(const EdaDataFile_NetRecord_ToeprintSubnetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_NetRecord_ToeprintSubnetRecord& operator=(EdaDataFile_NetRecord_ToeprintSubnetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_NetRecord_ToeprintSubnetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_NetRecord_ToeprintSubnetRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_NetRecord_ToeprintSubnetRecord*>(
               &_EdaDataFile_NetRecord_ToeprintSubnetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EdaDataFile_NetRecord_ToeprintSubnetRecord& a, EdaDataFile_NetRecord_ToeprintSubnetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_NetRecord_ToeprintSubnetRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_NetRecord_ToeprintSubnetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_NetRecord_ToeprintSubnetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_NetRecord_ToeprintSubnetRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_NetRecord_ToeprintSubnetRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_NetRecord_ToeprintSubnetRecord& from) {
    EdaDataFile_NetRecord_ToeprintSubnetRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_NetRecord_ToeprintSubnetRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord";
  }
  protected:
  explicit EdaDataFile_NetRecord_ToeprintSubnetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSideFieldNumber = 2,
    kComponentNumberFieldNumber = 3,
    kToeprintNumberFieldNumber = 4,
  };
  // optional .odbdesign.proto.EdaDataFile.BoardSide side = 2;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::odbdesign::proto::EdaDataFile_BoardSide side() const;
  void set_side(::odbdesign::proto::EdaDataFile_BoardSide value);
  private:
  ::odbdesign::proto::EdaDataFile_BoardSide _internal_side() const;
  void _internal_set_side(::odbdesign::proto::EdaDataFile_BoardSide value);
  public:

  // optional uint32 componentNumber = 3;
  bool has_componentnumber() const;
  private:
  bool _internal_has_componentnumber() const;
  public:
  void clear_componentnumber();
  uint32_t componentnumber() const;
  void set_componentnumber(uint32_t value);
  private:
  uint32_t _internal_componentnumber() const;
  void _internal_set_componentnumber(uint32_t value);
  public:

  // optional uint32 toeprintNumber = 4;
  bool has_toeprintnumber() const;
  private:
  bool _internal_has_toeprintnumber() const;
  public:
  void clear_toeprintnumber();
  uint32_t toeprintnumber() const;
  void set_toeprintnumber(uint32_t value);
  private:
  uint32_t _internal_toeprintnumber() const;
  void _internal_set_toeprintnumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int side_;
    uint32_t componentnumber_;
    uint32_t toeprintnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecord_PlaneSubnetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord) */ {
 public:
  inline EdaDataFile_NetRecord_PlaneSubnetRecord() : EdaDataFile_NetRecord_PlaneSubnetRecord(nullptr) {}
  ~EdaDataFile_NetRecord_PlaneSubnetRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecord_PlaneSubnetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_NetRecord_PlaneSubnetRecord(const EdaDataFile_NetRecord_PlaneSubnetRecord& from);
  EdaDataFile_NetRecord_PlaneSubnetRecord(EdaDataFile_NetRecord_PlaneSubnetRecord&& from) noexcept
    : EdaDataFile_NetRecord_PlaneSubnetRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_NetRecord_PlaneSubnetRecord& operator=(const EdaDataFile_NetRecord_PlaneSubnetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_NetRecord_PlaneSubnetRecord& operator=(EdaDataFile_NetRecord_PlaneSubnetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_NetRecord_PlaneSubnetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_NetRecord_PlaneSubnetRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_NetRecord_PlaneSubnetRecord*>(
               &_EdaDataFile_NetRecord_PlaneSubnetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdaDataFile_NetRecord_PlaneSubnetRecord& a, EdaDataFile_NetRecord_PlaneSubnetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_NetRecord_PlaneSubnetRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_NetRecord_PlaneSubnetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_NetRecord_PlaneSubnetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_NetRecord_PlaneSubnetRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_NetRecord_PlaneSubnetRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_NetRecord_PlaneSubnetRecord& from) {
    EdaDataFile_NetRecord_PlaneSubnetRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_NetRecord_PlaneSubnetRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord";
  }
  protected:
  explicit EdaDataFile_NetRecord_PlaneSubnetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_NetRecord_PlaneSubnetRecord_FillType FillType;
  static constexpr FillType SOLID =
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_SOLID;
  static constexpr FillType OUTLINE =
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_OUTLINE;
  static inline bool FillType_IsValid(int value) {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_IsValid(value);
  }
  static constexpr FillType FillType_MIN =
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_MIN;
  static constexpr FillType FillType_MAX =
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_MAX;
  static constexpr int FillType_ARRAYSIZE =
    EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_FillType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FillType_descriptor() {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_descriptor();
  }
  template<typename T>
  static inline const std::string& FillType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FillType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FillType_Name.");
    return EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_Name(enum_t_value);
  }
  static inline bool FillType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FillType* value) {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_Parse(name, value);
  }

  typedef EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType CutoutType;
  static constexpr CutoutType CIRCLE =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CIRCLE;
  static constexpr CutoutType RECTANGLE =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_RECTANGLE;
  static constexpr CutoutType OCTAGON =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_OCTAGON;
  static constexpr CutoutType EXACT =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_EXACT;
  static inline bool CutoutType_IsValid(int value) {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_IsValid(value);
  }
  static constexpr CutoutType CutoutType_MIN =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_MIN;
  static constexpr CutoutType CutoutType_MAX =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_MAX;
  static constexpr int CutoutType_ARRAYSIZE =
    EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_CutoutType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CutoutType_descriptor() {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_descriptor();
  }
  template<typename T>
  static inline const std::string& CutoutType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CutoutType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CutoutType_Name.");
    return EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_Name(enum_t_value);
  }
  static inline bool CutoutType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CutoutType* value) {
    return EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFillTypeFieldNumber = 2,
    kCutoutTypeFieldNumber = 3,
    kFillSizeFieldNumber = 4,
  };
  // optional .odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.FillType fillType = 2;
  bool has_filltype() const;
  private:
  bool _internal_has_filltype() const;
  public:
  void clear_filltype();
  ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType filltype() const;
  void set_filltype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType value);
  private:
  ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType _internal_filltype() const;
  void _internal_set_filltype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType value);
  public:

  // optional .odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.CutoutType cutoutType = 3;
  bool has_cutouttype() const;
  private:
  bool _internal_has_cutouttype() const;
  public:
  void clear_cutouttype();
  ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType cutouttype() const;
  void set_cutouttype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType value);
  private:
  ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType _internal_cutouttype() const;
  void _internal_set_cutouttype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType value);
  public:

  // optional float fillSize = 4;
  bool has_fillsize() const;
  private:
  bool _internal_has_fillsize() const;
  public:
  void clear_fillsize();
  float fillsize() const;
  void set_fillsize(float value);
  private:
  float _internal_fillsize() const;
  void _internal_set_fillsize(float value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int filltype_;
    int cutouttype_;
    float fillsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.NetRecord) */ {
 public:
  inline EdaDataFile_NetRecord() : EdaDataFile_NetRecord(nullptr) {}
  ~EdaDataFile_NetRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_NetRecord(const EdaDataFile_NetRecord& from);
  EdaDataFile_NetRecord(EdaDataFile_NetRecord&& from) noexcept
    : EdaDataFile_NetRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_NetRecord& operator=(const EdaDataFile_NetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_NetRecord& operator=(EdaDataFile_NetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_NetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_NetRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_NetRecord*>(
               &_EdaDataFile_NetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EdaDataFile_NetRecord& a, EdaDataFile_NetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_NetRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_NetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_NetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_NetRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_NetRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_NetRecord& from) {
    EdaDataFile_NetRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_NetRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.NetRecord";
  }
  protected:
  explicit EdaDataFile_NetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_NetRecord_SubnetRecord SubnetRecord;
  typedef EdaDataFile_NetRecord_ToeprintSubnetRecord ToeprintSubnetRecord;
  typedef EdaDataFile_NetRecord_PlaneSubnetRecord PlaneSubnetRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAttributesIdStringFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string attributesIdString = 2;
  bool has_attributesidstring() const;
  private:
  bool _internal_has_attributesidstring() const;
  public:
  void clear_attributesidstring();
  const std::string& attributesidstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attributesidstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attributesidstring();
  PROTOBUF_NODISCARD std::string* release_attributesidstring();
  void set_allocated_attributesidstring(std::string* attributesidstring);
  private:
  const std::string& _internal_attributesidstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributesidstring(const std::string& value);
  std::string* _internal_mutable_attributesidstring();
  public:

  // optional uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.NetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributesidstring_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse& other);
  static const EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse*>(&_EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "odbdesign.proto.EdaDataFile.PackageRecord.PinRecordsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_edadatafile_2eproto;
};

// -------------------------------------------------------------------

class EdaDataFile_PackageRecord_PinRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord) */ {
 public:
  inline EdaDataFile_PackageRecord_PinRecord() : EdaDataFile_PackageRecord_PinRecord(nullptr) {}
  ~EdaDataFile_PackageRecord_PinRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord_PinRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_PackageRecord_PinRecord(const EdaDataFile_PackageRecord_PinRecord& from);
  EdaDataFile_PackageRecord_PinRecord(EdaDataFile_PackageRecord_PinRecord&& from) noexcept
    : EdaDataFile_PackageRecord_PinRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_PackageRecord_PinRecord& operator=(const EdaDataFile_PackageRecord_PinRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_PackageRecord_PinRecord& operator=(EdaDataFile_PackageRecord_PinRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_PackageRecord_PinRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_PackageRecord_PinRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_PackageRecord_PinRecord*>(
               &_EdaDataFile_PackageRecord_PinRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EdaDataFile_PackageRecord_PinRecord& a, EdaDataFile_PackageRecord_PinRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_PackageRecord_PinRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_PackageRecord_PinRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_PackageRecord_PinRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_PackageRecord_PinRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_PackageRecord_PinRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_PackageRecord_PinRecord& from) {
    EdaDataFile_PackageRecord_PinRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_PackageRecord_PinRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.PackageRecord.PinRecord";
  }
  protected:
  explicit EdaDataFile_PackageRecord_PinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_PackageRecord_PinRecord_Type Type;
  static constexpr Type THROUGH_HOLE =
    EdaDataFile_PackageRecord_PinRecord_Type_THROUGH_HOLE;
  static constexpr Type BLIND =
    EdaDataFile_PackageRecord_PinRecord_Type_BLIND;
  static constexpr Type SURFACE =
    EdaDataFile_PackageRecord_PinRecord_Type_SURFACE;
  static inline bool Type_IsValid(int value) {
    return EdaDataFile_PackageRecord_PinRecord_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EdaDataFile_PackageRecord_PinRecord_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EdaDataFile_PackageRecord_PinRecord_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EdaDataFile_PackageRecord_PinRecord_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EdaDataFile_PackageRecord_PinRecord_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EdaDataFile_PackageRecord_PinRecord_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return EdaDataFile_PackageRecord_PinRecord_Type_Parse(name, value);
  }

  typedef EdaDataFile_PackageRecord_PinRecord_ElectricalType ElectricalType;
  static constexpr ElectricalType ELECTRICAL =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_ELECTRICAL;
  static constexpr ElectricalType NON_ELECTRICAL =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_NON_ELECTRICAL;
  static constexpr ElectricalType UNDEFINED =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_UNDEFINED;
  static inline bool ElectricalType_IsValid(int value) {
    return EdaDataFile_PackageRecord_PinRecord_ElectricalType_IsValid(value);
  }
  static constexpr ElectricalType ElectricalType_MIN =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_MIN;
  static constexpr ElectricalType ElectricalType_MAX =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_MAX;
  static constexpr int ElectricalType_ARRAYSIZE =
    EdaDataFile_PackageRecord_PinRecord_ElectricalType_ElectricalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ElectricalType_descriptor() {
    return EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor();
  }
  template<typename T>
  static inline const std::string& ElectricalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ElectricalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ElectricalType_Name.");
    return EdaDataFile_PackageRecord_PinRecord_ElectricalType_Name(enum_t_value);
  }
  static inline bool ElectricalType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ElectricalType* value) {
    return EdaDataFile_PackageRecord_PinRecord_ElectricalType_Parse(name, value);
  }

  typedef EdaDataFile_PackageRecord_PinRecord_MountType MountType;
  static constexpr MountType SMT =
    EdaDataFile_PackageRecord_PinRecord_MountType_SMT;
  static constexpr MountType RECOMMENDED_SMT_PAD =
    EdaDataFile_PackageRecord_PinRecord_MountType_RECOMMENDED_SMT_PAD;
  static constexpr MountType MT_THROUGH_HOLE =
    EdaDataFile_PackageRecord_PinRecord_MountType_MT_THROUGH_HOLE;
  static constexpr MountType RECOMMENDED_THROUGH_HOLE =
    EdaDataFile_PackageRecord_PinRecord_MountType_RECOMMENDED_THROUGH_HOLE;
  static constexpr MountType PRESSFIT =
    EdaDataFile_PackageRecord_PinRecord_MountType_PRESSFIT;
  static constexpr MountType NON_BOARD =
    EdaDataFile_PackageRecord_PinRecord_MountType_NON_BOARD;
  static constexpr MountType HOLE =
    EdaDataFile_PackageRecord_PinRecord_MountType_HOLE;
  static constexpr MountType MT_UNDEFINED =
    EdaDataFile_PackageRecord_PinRecord_MountType_MT_UNDEFINED;
  static inline bool MountType_IsValid(int value) {
    return EdaDataFile_PackageRecord_PinRecord_MountType_IsValid(value);
  }
  static constexpr MountType MountType_MIN =
    EdaDataFile_PackageRecord_PinRecord_MountType_MountType_MIN;
  static constexpr MountType MountType_MAX =
    EdaDataFile_PackageRecord_PinRecord_MountType_MountType_MAX;
  static constexpr int MountType_ARRAYSIZE =
    EdaDataFile_PackageRecord_PinRecord_MountType_MountType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MountType_descriptor() {
    return EdaDataFile_PackageRecord_PinRecord_MountType_descriptor();
  }
  template<typename T>
  static inline const std::string& MountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MountType_Name.");
    return EdaDataFile_PackageRecord_PinRecord_MountType_Name(enum_t_value);
  }
  static inline bool MountType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MountType* value) {
    return EdaDataFile_PackageRecord_PinRecord_MountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kXCenterFieldNumber = 3,
    kYCenterFieldNumber = 4,
    kFinishedHoleSizeFieldNumber = 5,
    kElectricalTypeFieldNumber = 6,
    kMountTypeFieldNumber = 7,
    kIdFieldNumber = 8,
    kIndexFieldNumber = 9,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type type() const;
  void set_type(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type value);
  private:
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type _internal_type() const;
  void _internal_set_type(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type value);
  public:

  // optional float xCenter = 3;
  bool has_xcenter() const;
  private:
  bool _internal_has_xcenter() const;
  public:
  void clear_xcenter();
  float xcenter() const;
  void set_xcenter(float value);
  private:
  float _internal_xcenter() const;
  void _internal_set_xcenter(float value);
  public:

  // optional float yCenter = 4;
  bool has_ycenter() const;
  private:
  bool _internal_has_ycenter() const;
  public:
  void clear_ycenter();
  float ycenter() const;
  void set_ycenter(float value);
  private:
  float _internal_ycenter() const;
  void _internal_set_ycenter(float value);
  public:

  // optional float finishedHoleSize = 5;
  bool has_finishedholesize() const;
  private:
  bool _internal_has_finishedholesize() const;
  public:
  void clear_finishedholesize();
  float finishedholesize() const;
  void set_finishedholesize(float value);
  private:
  float _internal_finishedholesize() const;
  void _internal_set_finishedholesize(float value);
  public:

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.ElectricalType electricalType = 6;
  bool has_electricaltype() const;
  private:
  bool _internal_has_electricaltype() const;
  public:
  void clear_electricaltype();
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType electricaltype() const;
  void set_electricaltype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType value);
  private:
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType _internal_electricaltype() const;
  void _internal_set_electricaltype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType value);
  public:

  // optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.MountType mountType = 7;
  bool has_mounttype() const;
  private:
  bool _internal_has_mounttype() const;
  public:
  void clear_mounttype();
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType mounttype() const;
  void set_mounttype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType value);
  private:
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType _internal_mounttype() const;
  void _internal_set_mounttype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType value);
  public:

  // optional uint32 id = 8;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 index = 9;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    float xcenter_;
    float ycenter_;
    float finishedholesize_;
    int electricaltype_;
    int mounttype_;
    uint32_t id_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_PackageRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile.PackageRecord) */ {
 public:
  inline EdaDataFile_PackageRecord() : EdaDataFile_PackageRecord(nullptr) {}
  ~EdaDataFile_PackageRecord() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile_PackageRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile_PackageRecord(const EdaDataFile_PackageRecord& from);
  EdaDataFile_PackageRecord(EdaDataFile_PackageRecord&& from) noexcept
    : EdaDataFile_PackageRecord() {
    *this = ::std::move(from);
  }

  inline EdaDataFile_PackageRecord& operator=(const EdaDataFile_PackageRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile_PackageRecord& operator=(EdaDataFile_PackageRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile_PackageRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile_PackageRecord* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile_PackageRecord*>(
               &_EdaDataFile_PackageRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EdaDataFile_PackageRecord& a, EdaDataFile_PackageRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile_PackageRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile_PackageRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile_PackageRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile_PackageRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile_PackageRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile_PackageRecord& from) {
    EdaDataFile_PackageRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile_PackageRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile.PackageRecord";
  }
  protected:
  explicit EdaDataFile_PackageRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_PackageRecord_PinRecord PinRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kPinRecordsFieldNumber = 8,
    kPinRecordsByNameFieldNumber = 9,
    kPropertyRecordsFieldNumber = 10,
    kNameFieldNumber = 1,
    kAttributesIdStringFieldNumber = 7,
    kPitchFieldNumber = 2,
    kXMinFieldNumber = 3,
    kYMinFieldNumber = 4,
    kXMaxFieldNumber = 5,
    kYMaxFieldNumber = 6,
  };
  // repeated .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord pinRecords = 8;
  int pinrecords_size() const;
  private:
  int _internal_pinrecords_size() const;
  public:
  void clear_pinrecords();
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* mutable_pinrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
      mutable_pinrecords();
  private:
  const ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord& _internal_pinrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* _internal_add_pinrecords();
  public:
  const ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord& pinrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* add_pinrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
      pinrecords() const;

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord> pinRecordsByName = 9;
  int pinrecordsbyname_size() const;
  private:
  int _internal_pinrecordsbyname_size() const;
  public:
  void clear_pinrecordsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
      _internal_pinrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
      _internal_mutable_pinrecordsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
      pinrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
      mutable_pinrecordsbyname();

  // repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 10;
  int propertyrecords_size() const;
  private:
  int _internal_propertyrecords_size() const;
  public:
  void clear_propertyrecords();
  ::odbdesign::proto::EdaDataFile_PropertyRecord* mutable_propertyrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PropertyRecord >*
      mutable_propertyrecords();
  private:
  const ::odbdesign::proto::EdaDataFile_PropertyRecord& _internal_propertyrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PropertyRecord* _internal_add_propertyrecords();
  public:
  const ::odbdesign::proto::EdaDataFile_PropertyRecord& propertyrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PropertyRecord* add_propertyrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PropertyRecord >&
      propertyrecords() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string attributesIdString = 7;
  bool has_attributesidstring() const;
  private:
  bool _internal_has_attributesidstring() const;
  public:
  void clear_attributesidstring();
  const std::string& attributesidstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attributesidstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attributesidstring();
  PROTOBUF_NODISCARD std::string* release_attributesidstring();
  void set_allocated_attributesidstring(std::string* attributesidstring);
  private:
  const std::string& _internal_attributesidstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributesidstring(const std::string& value);
  std::string* _internal_mutable_attributesidstring();
  public:

  // optional float pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // optional float xMin = 3;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // optional float yMin = 4;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // optional float xMax = 5;
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // optional float yMax = 6;
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile.PackageRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord > pinrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        EdaDataFile_PackageRecord_PinRecordsByNameEntry_DoNotUse,
        std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pinrecordsbyname_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PropertyRecord > propertyrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributesidstring_;
    float pitch_;
    float xmin_;
    float ymin_;
    float xmax_;
    float ymax_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// -------------------------------------------------------------------

class EdaDataFile_NetRecordsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_NetRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_NetRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_NetRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_NetRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  EdaDataFile_NetRecordsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EdaDataFile_NetRecordsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EdaDataFile_NetRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EdaDataFile_NetRecordsByNameEntry_DoNotUse& other);
  static const EdaDataFile_NetRecordsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EdaDataFile_NetRecordsByNameEntry_DoNotUse*>(&_EdaDataFile_NetRecordsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "odbdesign.proto.EdaDataFile.NetRecordsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_edadatafile_2eproto;
};

// -------------------------------------------------------------------

class EdaDataFile_PackageRecordsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_PackageRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_PackageRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EdaDataFile_PackageRecordsByNameEntry_DoNotUse, 
    std::string, ::odbdesign::proto::EdaDataFile_PackageRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  EdaDataFile_PackageRecordsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EdaDataFile_PackageRecordsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EdaDataFile_PackageRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EdaDataFile_PackageRecordsByNameEntry_DoNotUse& other);
  static const EdaDataFile_PackageRecordsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EdaDataFile_PackageRecordsByNameEntry_DoNotUse*>(&_EdaDataFile_PackageRecordsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "odbdesign.proto.EdaDataFile.PackageRecordsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_edadatafile_2eproto;
};

// -------------------------------------------------------------------

class EdaDataFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odbdesign.proto.EdaDataFile) */ {
 public:
  inline EdaDataFile() : EdaDataFile(nullptr) {}
  ~EdaDataFile() override;
  explicit PROTOBUF_CONSTEXPR EdaDataFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdaDataFile(const EdaDataFile& from);
  EdaDataFile(EdaDataFile&& from) noexcept
    : EdaDataFile() {
    *this = ::std::move(from);
  }

  inline EdaDataFile& operator=(const EdaDataFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdaDataFile& operator=(EdaDataFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdaDataFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdaDataFile* internal_default_instance() {
    return reinterpret_cast<const EdaDataFile*>(
               &_EdaDataFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EdaDataFile& a, EdaDataFile& b) {
    a.Swap(&b);
  }
  inline void Swap(EdaDataFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdaDataFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdaDataFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdaDataFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdaDataFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdaDataFile& from) {
    EdaDataFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdaDataFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odbdesign.proto.EdaDataFile";
  }
  protected:
  explicit EdaDataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdaDataFile_PropertyRecord PropertyRecord;
  typedef EdaDataFile_NetRecord NetRecord;
  typedef EdaDataFile_PackageRecord PackageRecord;

  typedef EdaDataFile_BoardSide BoardSide;
  static constexpr BoardSide TOP =
    EdaDataFile_BoardSide_TOP;
  static constexpr BoardSide BOTTOM =
    EdaDataFile_BoardSide_BOTTOM;
  static inline bool BoardSide_IsValid(int value) {
    return EdaDataFile_BoardSide_IsValid(value);
  }
  static constexpr BoardSide BoardSide_MIN =
    EdaDataFile_BoardSide_BoardSide_MIN;
  static constexpr BoardSide BoardSide_MAX =
    EdaDataFile_BoardSide_BoardSide_MAX;
  static constexpr int BoardSide_ARRAYSIZE =
    EdaDataFile_BoardSide_BoardSide_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BoardSide_descriptor() {
    return EdaDataFile_BoardSide_descriptor();
  }
  template<typename T>
  static inline const std::string& BoardSide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BoardSide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BoardSide_Name.");
    return EdaDataFile_BoardSide_Name(enum_t_value);
  }
  static inline bool BoardSide_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BoardSide* value) {
    return EdaDataFile_BoardSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNamesFieldNumber = 4,
    kAttributeNamesFieldNumber = 5,
    kAttributeTextValuesFieldNumber = 6,
    kNetRecordsFieldNumber = 7,
    kNetRecordsByNameFieldNumber = 8,
    kPackageRecordsFieldNumber = 9,
    kPackageRecordsByNameFieldNumber = 10,
    kPathFieldNumber = 1,
    kUnitsFieldNumber = 2,
    kSourceFieldNumber = 3,
  };
  // repeated string layerNames = 4;
  int layernames_size() const;
  private:
  int _internal_layernames_size() const;
  public:
  void clear_layernames();
  const std::string& layernames(int index) const;
  std::string* mutable_layernames(int index);
  void set_layernames(int index, const std::string& value);
  void set_layernames(int index, std::string&& value);
  void set_layernames(int index, const char* value);
  void set_layernames(int index, const char* value, size_t size);
  std::string* add_layernames();
  void add_layernames(const std::string& value);
  void add_layernames(std::string&& value);
  void add_layernames(const char* value);
  void add_layernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& layernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_layernames();
  private:
  const std::string& _internal_layernames(int index) const;
  std::string* _internal_add_layernames();
  public:

  // repeated string attributeNames = 5;
  int attributenames_size() const;
  private:
  int _internal_attributenames_size() const;
  public:
  void clear_attributenames();
  const std::string& attributenames(int index) const;
  std::string* mutable_attributenames(int index);
  void set_attributenames(int index, const std::string& value);
  void set_attributenames(int index, std::string&& value);
  void set_attributenames(int index, const char* value);
  void set_attributenames(int index, const char* value, size_t size);
  std::string* add_attributenames();
  void add_attributenames(const std::string& value);
  void add_attributenames(std::string&& value);
  void add_attributenames(const char* value);
  void add_attributenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributenames();
  private:
  const std::string& _internal_attributenames(int index) const;
  std::string* _internal_add_attributenames();
  public:

  // repeated string attributeTextValues = 6;
  int attributetextvalues_size() const;
  private:
  int _internal_attributetextvalues_size() const;
  public:
  void clear_attributetextvalues();
  const std::string& attributetextvalues(int index) const;
  std::string* mutable_attributetextvalues(int index);
  void set_attributetextvalues(int index, const std::string& value);
  void set_attributetextvalues(int index, std::string&& value);
  void set_attributetextvalues(int index, const char* value);
  void set_attributetextvalues(int index, const char* value, size_t size);
  std::string* add_attributetextvalues();
  void add_attributetextvalues(const std::string& value);
  void add_attributetextvalues(std::string&& value);
  void add_attributetextvalues(const char* value);
  void add_attributetextvalues(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributetextvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributetextvalues();
  private:
  const std::string& _internal_attributetextvalues(int index) const;
  std::string* _internal_add_attributetextvalues();
  public:

  // repeated .odbdesign.proto.EdaDataFile.NetRecord netRecords = 7;
  int netrecords_size() const;
  private:
  int _internal_netrecords_size() const;
  public:
  void clear_netrecords();
  ::odbdesign::proto::EdaDataFile_NetRecord* mutable_netrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord >*
      mutable_netrecords();
  private:
  const ::odbdesign::proto::EdaDataFile_NetRecord& _internal_netrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_NetRecord* _internal_add_netrecords();
  public:
  const ::odbdesign::proto::EdaDataFile_NetRecord& netrecords(int index) const;
  ::odbdesign::proto::EdaDataFile_NetRecord* add_netrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord >&
      netrecords() const;

  // map<string, .odbdesign.proto.EdaDataFile.NetRecord> netRecordsByName = 8;
  int netrecordsbyname_size() const;
  private:
  int _internal_netrecordsbyname_size() const;
  public:
  void clear_netrecordsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >&
      _internal_netrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >*
      _internal_mutable_netrecordsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >&
      netrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >*
      mutable_netrecordsbyname();

  // repeated .odbdesign.proto.EdaDataFile.PackageRecord packageRecords = 9;
  int packagerecords_size() const;
  private:
  int _internal_packagerecords_size() const;
  public:
  void clear_packagerecords();
  ::odbdesign::proto::EdaDataFile_PackageRecord* mutable_packagerecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord >*
      mutable_packagerecords();
  private:
  const ::odbdesign::proto::EdaDataFile_PackageRecord& _internal_packagerecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PackageRecord* _internal_add_packagerecords();
  public:
  const ::odbdesign::proto::EdaDataFile_PackageRecord& packagerecords(int index) const;
  ::odbdesign::proto::EdaDataFile_PackageRecord* add_packagerecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord >&
      packagerecords() const;

  // map<string, .odbdesign.proto.EdaDataFile.PackageRecord> packageRecordsByName = 10;
  int packagerecordsbyname_size() const;
  private:
  int _internal_packagerecordsbyname_size() const;
  public:
  void clear_packagerecordsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >&
      _internal_packagerecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >*
      _internal_mutable_packagerecordsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >&
      packagerecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >*
      mutable_packagerecordsbyname();

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string units = 2;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional string source = 3;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // @@protoc_insertion_point(class_scope:odbdesign.proto.EdaDataFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> layernames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributenames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributetextvalues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord > netrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        EdaDataFile_NetRecordsByNameEntry_DoNotUse,
        std::string, ::odbdesign::proto::EdaDataFile_NetRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> netrecordsbyname_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord > packagerecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        EdaDataFile_PackageRecordsByNameEntry_DoNotUse,
        std::string, ::odbdesign::proto::EdaDataFile_PackageRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> packagerecordsbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_edadatafile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EdaDataFile_PropertyRecord

// optional string name = 1;
inline bool EdaDataFile_PropertyRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_PropertyRecord::has_name() const {
  return _internal_has_name();
}
inline void EdaDataFile_PropertyRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdaDataFile_PropertyRecord::name() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PropertyRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_PropertyRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PropertyRecord.name)
}
inline std::string* EdaDataFile_PropertyRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PropertyRecord.name)
  return _s;
}
inline const std::string& EdaDataFile_PropertyRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdaDataFile_PropertyRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_PropertyRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_PropertyRecord::release_name() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.PropertyRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_PropertyRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.PropertyRecord.name)
}

// optional string value = 2;
inline bool EdaDataFile_PropertyRecord::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_PropertyRecord::has_value() const {
  return _internal_has_value();
}
inline void EdaDataFile_PropertyRecord::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EdaDataFile_PropertyRecord::value() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PropertyRecord.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_PropertyRecord::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PropertyRecord.value)
}
inline std::string* EdaDataFile_PropertyRecord::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PropertyRecord.value)
  return _s;
}
inline const std::string& EdaDataFile_PropertyRecord::_internal_value() const {
  return _impl_.value_.Get();
}
inline void EdaDataFile_PropertyRecord::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_PropertyRecord::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_PropertyRecord::release_value() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.PropertyRecord.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_PropertyRecord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.PropertyRecord.value)
}

// repeated float floatValues = 3;
inline int EdaDataFile_PropertyRecord::_internal_floatvalues_size() const {
  return _impl_.floatvalues_.size();
}
inline int EdaDataFile_PropertyRecord::floatvalues_size() const {
  return _internal_floatvalues_size();
}
inline void EdaDataFile_PropertyRecord::clear_floatvalues() {
  _impl_.floatvalues_.Clear();
}
inline float EdaDataFile_PropertyRecord::_internal_floatvalues(int index) const {
  return _impl_.floatvalues_.Get(index);
}
inline float EdaDataFile_PropertyRecord::floatvalues(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PropertyRecord.floatValues)
  return _internal_floatvalues(index);
}
inline void EdaDataFile_PropertyRecord::set_floatvalues(int index, float value) {
  _impl_.floatvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PropertyRecord.floatValues)
}
inline void EdaDataFile_PropertyRecord::_internal_add_floatvalues(float value) {
  _impl_.floatvalues_.Add(value);
}
inline void EdaDataFile_PropertyRecord::add_floatvalues(float value) {
  _internal_add_floatvalues(value);
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.PropertyRecord.floatValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EdaDataFile_PropertyRecord::_internal_floatvalues() const {
  return _impl_.floatvalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EdaDataFile_PropertyRecord::floatvalues() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.PropertyRecord.floatValues)
  return _internal_floatvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EdaDataFile_PropertyRecord::_internal_mutable_floatvalues() {
  return &_impl_.floatvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EdaDataFile_PropertyRecord::mutable_floatvalues() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.PropertyRecord.floatValues)
  return _internal_mutable_floatvalues();
}

// -------------------------------------------------------------------

// EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord

// optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.Type type = 2;
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::has_type() const {
  return _internal_has_type();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_type() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type >(_impl_.type_);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::type() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.type)
  return _internal_type();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.type)
}

// optional uint32 layerNumber = 3;
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_has_layernumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::has_layernumber() const {
  return _internal_has_layernumber();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::clear_layernumber() {
  _impl_.layernumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_layernumber() const {
  return _impl_.layernumber_;
}
inline uint32_t EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::layernumber() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.layerNumber)
  return _internal_layernumber();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_set_layernumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layernumber_ = value;
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::set_layernumber(uint32_t value) {
  _internal_set_layernumber(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.layerNumber)
}

// optional uint32 featureNumber = 4;
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_has_featurenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::has_featurenumber() const {
  return _internal_has_featurenumber();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::clear_featurenumber() {
  _impl_.featurenumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_featurenumber() const {
  return _impl_.featurenumber_;
}
inline uint32_t EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::featurenumber() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.featureNumber)
  return _internal_featurenumber();
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::_internal_set_featurenumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.featurenumber_ = value;
}
inline void EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord::set_featurenumber(uint32_t value) {
  _internal_set_featurenumber(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord.featureNumber)
}

// -------------------------------------------------------------------

// EdaDataFile_NetRecord_SubnetRecord

// optional .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.Type type = 1;
inline bool EdaDataFile_NetRecord_SubnetRecord::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_SubnetRecord::has_type() const {
  return _internal_has_type();
}
inline void EdaDataFile_NetRecord_SubnetRecord::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::_internal_type() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type >(_impl_.type_);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type EdaDataFile_NetRecord_SubnetRecord::type() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.type)
  return _internal_type();
}
inline void EdaDataFile_NetRecord_SubnetRecord::_internal_set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void EdaDataFile_NetRecord_SubnetRecord::set_type(::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.type)
}

// repeated .odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.FeatureIdRecord featureIdRecords = 2;
inline int EdaDataFile_NetRecord_SubnetRecord::_internal_featureidrecords_size() const {
  return _impl_.featureidrecords_.size();
}
inline int EdaDataFile_NetRecord_SubnetRecord::featureidrecords_size() const {
  return _internal_featureidrecords_size();
}
inline void EdaDataFile_NetRecord_SubnetRecord::clear_featureidrecords() {
  _impl_.featureidrecords_.Clear();
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* EdaDataFile_NetRecord_SubnetRecord::mutable_featureidrecords(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.featureIdRecords)
  return _impl_.featureidrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >*
EdaDataFile_NetRecord_SubnetRecord::mutable_featureidrecords() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.featureIdRecords)
  return &_impl_.featureidrecords_;
}
inline const ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& EdaDataFile_NetRecord_SubnetRecord::_internal_featureidrecords(int index) const {
  return _impl_.featureidrecords_.Get(index);
}
inline const ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord& EdaDataFile_NetRecord_SubnetRecord::featureidrecords(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.featureIdRecords)
  return _internal_featureidrecords(index);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* EdaDataFile_NetRecord_SubnetRecord::_internal_add_featureidrecords() {
  return _impl_.featureidrecords_.Add();
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* EdaDataFile_NetRecord_SubnetRecord::add_featureidrecords() {
  ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord* _add = _internal_add_featureidrecords();
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.featureIdRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord >&
EdaDataFile_NetRecord_SubnetRecord::featureidrecords() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.NetRecord.SubnetRecord.featureIdRecords)
  return _impl_.featureidrecords_;
}

// -------------------------------------------------------------------

// EdaDataFile_NetRecord_ToeprintSubnetRecord

// optional .odbdesign.proto.EdaDataFile.BoardSide side = 2;
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_has_side() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::has_side() const {
  return _internal_has_side();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::clear_side() {
  _impl_.side_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::odbdesign::proto::EdaDataFile_BoardSide EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_side() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_BoardSide >(_impl_.side_);
}
inline ::odbdesign::proto::EdaDataFile_BoardSide EdaDataFile_NetRecord_ToeprintSubnetRecord::side() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.side)
  return _internal_side();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_set_side(::odbdesign::proto::EdaDataFile_BoardSide value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.side_ = value;
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::set_side(::odbdesign::proto::EdaDataFile_BoardSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.side)
}

// optional uint32 componentNumber = 3;
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_has_componentnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::has_componentnumber() const {
  return _internal_has_componentnumber();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::clear_componentnumber() {
  _impl_.componentnumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_componentnumber() const {
  return _impl_.componentnumber_;
}
inline uint32_t EdaDataFile_NetRecord_ToeprintSubnetRecord::componentnumber() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.componentNumber)
  return _internal_componentnumber();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_set_componentnumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.componentnumber_ = value;
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::set_componentnumber(uint32_t value) {
  _internal_set_componentnumber(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.componentNumber)
}

// optional uint32 toeprintNumber = 4;
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_has_toeprintnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_ToeprintSubnetRecord::has_toeprintnumber() const {
  return _internal_has_toeprintnumber();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::clear_toeprintnumber() {
  _impl_.toeprintnumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_toeprintnumber() const {
  return _impl_.toeprintnumber_;
}
inline uint32_t EdaDataFile_NetRecord_ToeprintSubnetRecord::toeprintnumber() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.toeprintNumber)
  return _internal_toeprintnumber();
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::_internal_set_toeprintnumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.toeprintnumber_ = value;
}
inline void EdaDataFile_NetRecord_ToeprintSubnetRecord::set_toeprintnumber(uint32_t value) {
  _internal_set_toeprintnumber(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.ToeprintSubnetRecord.toeprintNumber)
}

// -------------------------------------------------------------------

// EdaDataFile_NetRecord_PlaneSubnetRecord

// optional .odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.FillType fillType = 2;
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_has_filltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::has_filltype() const {
  return _internal_has_filltype();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::clear_filltype() {
  _impl_.filltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_filltype() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType >(_impl_.filltype_);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType EdaDataFile_NetRecord_PlaneSubnetRecord::filltype() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.fillType)
  return _internal_filltype();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_set_filltype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filltype_ = value;
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::set_filltype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType value) {
  _internal_set_filltype(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.fillType)
}

// optional .odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.CutoutType cutoutType = 3;
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_has_cutouttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::has_cutouttype() const {
  return _internal_has_cutouttype();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::clear_cutouttype() {
  _impl_.cutouttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_cutouttype() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType >(_impl_.cutouttype_);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType EdaDataFile_NetRecord_PlaneSubnetRecord::cutouttype() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.cutoutType)
  return _internal_cutouttype();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_set_cutouttype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cutouttype_ = value;
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::set_cutouttype(::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType value) {
  _internal_set_cutouttype(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.cutoutType)
}

// optional float fillSize = 4;
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_has_fillsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord_PlaneSubnetRecord::has_fillsize() const {
  return _internal_has_fillsize();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::clear_fillsize() {
  _impl_.fillsize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_fillsize() const {
  return _impl_.fillsize_;
}
inline float EdaDataFile_NetRecord_PlaneSubnetRecord::fillsize() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.fillSize)
  return _internal_fillsize();
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::_internal_set_fillsize(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fillsize_ = value;
}
inline void EdaDataFile_NetRecord_PlaneSubnetRecord::set_fillsize(float value) {
  _internal_set_fillsize(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.PlaneSubnetRecord.fillSize)
}

// -------------------------------------------------------------------

// EdaDataFile_NetRecord

// optional string name = 1;
inline bool EdaDataFile_NetRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord::has_name() const {
  return _internal_has_name();
}
inline void EdaDataFile_NetRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdaDataFile_NetRecord::name() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_NetRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.name)
}
inline std::string* EdaDataFile_NetRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.NetRecord.name)
  return _s;
}
inline const std::string& EdaDataFile_NetRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdaDataFile_NetRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_NetRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_NetRecord::release_name() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.NetRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_NetRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.NetRecord.name)
}

// optional string attributesIdString = 2;
inline bool EdaDataFile_NetRecord::_internal_has_attributesidstring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord::has_attributesidstring() const {
  return _internal_has_attributesidstring();
}
inline void EdaDataFile_NetRecord::clear_attributesidstring() {
  _impl_.attributesidstring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EdaDataFile_NetRecord::attributesidstring() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.attributesIdString)
  return _internal_attributesidstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_NetRecord::set_attributesidstring(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attributesidstring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.attributesIdString)
}
inline std::string* EdaDataFile_NetRecord::mutable_attributesidstring() {
  std::string* _s = _internal_mutable_attributesidstring();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.NetRecord.attributesIdString)
  return _s;
}
inline const std::string& EdaDataFile_NetRecord::_internal_attributesidstring() const {
  return _impl_.attributesidstring_.Get();
}
inline void EdaDataFile_NetRecord::_internal_set_attributesidstring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attributesidstring_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_NetRecord::_internal_mutable_attributesidstring() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attributesidstring_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_NetRecord::release_attributesidstring() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.NetRecord.attributesIdString)
  if (!_internal_has_attributesidstring()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attributesidstring_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributesidstring_.IsDefault()) {
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_NetRecord::set_allocated_attributesidstring(std::string* attributesidstring) {
  if (attributesidstring != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attributesidstring_.SetAllocated(attributesidstring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributesidstring_.IsDefault()) {
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.NetRecord.attributesIdString)
}

// optional uint32 index = 3;
inline bool EdaDataFile_NetRecord::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_NetRecord::has_index() const {
  return _internal_has_index();
}
inline void EdaDataFile_NetRecord::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EdaDataFile_NetRecord::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t EdaDataFile_NetRecord::index() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.NetRecord.index)
  return _internal_index();
}
inline void EdaDataFile_NetRecord::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void EdaDataFile_NetRecord::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.NetRecord.index)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EdaDataFile_PackageRecord_PinRecord

// optional string name = 1;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_name() const {
  return _internal_has_name();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdaDataFile_PackageRecord_PinRecord::name() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_PackageRecord_PinRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name)
}
inline std::string* EdaDataFile_PackageRecord_PinRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name)
  return _s;
}
inline const std::string& EdaDataFile_PackageRecord_PinRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord_PinRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord_PinRecord::release_name() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.name)
}

// optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.Type type = 2;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_type() const {
  return _internal_has_type();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::_internal_type() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type >(_impl_.type_);
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type EdaDataFile_PackageRecord_PinRecord::type() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.type)
  return _internal_type();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_type(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_type(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.type)
}

// optional float xCenter = 3;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_xcenter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_xcenter() const {
  return _internal_has_xcenter();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_xcenter() {
  _impl_.xcenter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float EdaDataFile_PackageRecord_PinRecord::_internal_xcenter() const {
  return _impl_.xcenter_;
}
inline float EdaDataFile_PackageRecord_PinRecord::xcenter() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.xCenter)
  return _internal_xcenter();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_xcenter(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.xcenter_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_xcenter(float value) {
  _internal_set_xcenter(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.xCenter)
}

// optional float yCenter = 4;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_ycenter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_ycenter() const {
  return _internal_has_ycenter();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_ycenter() {
  _impl_.ycenter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EdaDataFile_PackageRecord_PinRecord::_internal_ycenter() const {
  return _impl_.ycenter_;
}
inline float EdaDataFile_PackageRecord_PinRecord::ycenter() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.yCenter)
  return _internal_ycenter();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_ycenter(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ycenter_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_ycenter(float value) {
  _internal_set_ycenter(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.yCenter)
}

// optional float finishedHoleSize = 5;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_finishedholesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_finishedholesize() const {
  return _internal_has_finishedholesize();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_finishedholesize() {
  _impl_.finishedholesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EdaDataFile_PackageRecord_PinRecord::_internal_finishedholesize() const {
  return _impl_.finishedholesize_;
}
inline float EdaDataFile_PackageRecord_PinRecord::finishedholesize() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.finishedHoleSize)
  return _internal_finishedholesize();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_finishedholesize(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.finishedholesize_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_finishedholesize(float value) {
  _internal_set_finishedholesize(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.finishedHoleSize)
}

// optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.ElectricalType electricalType = 6;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_electricaltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_electricaltype() const {
  return _internal_has_electricaltype();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_electricaltype() {
  _impl_.electricaltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::_internal_electricaltype() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType >(_impl_.electricaltype_);
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType EdaDataFile_PackageRecord_PinRecord::electricaltype() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.electricalType)
  return _internal_electricaltype();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_electricaltype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.electricaltype_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_electricaltype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType value) {
  _internal_set_electricaltype(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.electricalType)
}

// optional .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.MountType mountType = 7;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_mounttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_mounttype() const {
  return _internal_has_mounttype();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_mounttype() {
  _impl_.mounttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::_internal_mounttype() const {
  return static_cast< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType >(_impl_.mounttype_);
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType EdaDataFile_PackageRecord_PinRecord::mounttype() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.mountType)
  return _internal_mounttype();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_mounttype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mounttype_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_mounttype(::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType value) {
  _internal_set_mounttype(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.mountType)
}

// optional uint32 id = 8;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_id() const {
  return _internal_has_id();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t EdaDataFile_PackageRecord_PinRecord::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t EdaDataFile_PackageRecord_PinRecord::id() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.id)
  return _internal_id();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.id_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.id)
}

// optional uint32 index = 9;
inline bool EdaDataFile_PackageRecord_PinRecord::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord_PinRecord::has_index() const {
  return _internal_has_index();
}
inline void EdaDataFile_PackageRecord_PinRecord::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t EdaDataFile_PackageRecord_PinRecord::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t EdaDataFile_PackageRecord_PinRecord::index() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.index)
  return _internal_index();
}
inline void EdaDataFile_PackageRecord_PinRecord::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.index_ = value;
}
inline void EdaDataFile_PackageRecord_PinRecord::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.PinRecord.index)
}

// -------------------------------------------------------------------

// EdaDataFile_PackageRecord

// optional string name = 1;
inline bool EdaDataFile_PackageRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_name() const {
  return _internal_has_name();
}
inline void EdaDataFile_PackageRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdaDataFile_PackageRecord::name() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_PackageRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.name)
}
inline std::string* EdaDataFile_PackageRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PackageRecord.name)
  return _s;
}
inline const std::string& EdaDataFile_PackageRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdaDataFile_PackageRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord::release_name() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.PackageRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_PackageRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.PackageRecord.name)
}

// optional float pitch = 2;
inline bool EdaDataFile_PackageRecord::_internal_has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_pitch() const {
  return _internal_has_pitch();
}
inline void EdaDataFile_PackageRecord::clear_pitch() {
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float EdaDataFile_PackageRecord::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float EdaDataFile_PackageRecord::pitch() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.pitch)
  return _internal_pitch();
}
inline void EdaDataFile_PackageRecord::_internal_set_pitch(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pitch_ = value;
}
inline void EdaDataFile_PackageRecord::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.pitch)
}

// optional float xMin = 3;
inline bool EdaDataFile_PackageRecord::_internal_has_xmin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_xmin() const {
  return _internal_has_xmin();
}
inline void EdaDataFile_PackageRecord::clear_xmin() {
  _impl_.xmin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EdaDataFile_PackageRecord::_internal_xmin() const {
  return _impl_.xmin_;
}
inline float EdaDataFile_PackageRecord::xmin() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.xMin)
  return _internal_xmin();
}
inline void EdaDataFile_PackageRecord::_internal_set_xmin(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.xmin_ = value;
}
inline void EdaDataFile_PackageRecord::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.xMin)
}

// optional float yMin = 4;
inline bool EdaDataFile_PackageRecord::_internal_has_ymin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_ymin() const {
  return _internal_has_ymin();
}
inline void EdaDataFile_PackageRecord::clear_ymin() {
  _impl_.ymin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EdaDataFile_PackageRecord::_internal_ymin() const {
  return _impl_.ymin_;
}
inline float EdaDataFile_PackageRecord::ymin() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.yMin)
  return _internal_ymin();
}
inline void EdaDataFile_PackageRecord::_internal_set_ymin(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ymin_ = value;
}
inline void EdaDataFile_PackageRecord::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.yMin)
}

// optional float xMax = 5;
inline bool EdaDataFile_PackageRecord::_internal_has_xmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_xmax() const {
  return _internal_has_xmax();
}
inline void EdaDataFile_PackageRecord::clear_xmax() {
  _impl_.xmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float EdaDataFile_PackageRecord::_internal_xmax() const {
  return _impl_.xmax_;
}
inline float EdaDataFile_PackageRecord::xmax() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.xMax)
  return _internal_xmax();
}
inline void EdaDataFile_PackageRecord::_internal_set_xmax(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.xmax_ = value;
}
inline void EdaDataFile_PackageRecord::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.xMax)
}

// optional float yMax = 6;
inline bool EdaDataFile_PackageRecord::_internal_has_ymax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_ymax() const {
  return _internal_has_ymax();
}
inline void EdaDataFile_PackageRecord::clear_ymax() {
  _impl_.ymax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float EdaDataFile_PackageRecord::_internal_ymax() const {
  return _impl_.ymax_;
}
inline float EdaDataFile_PackageRecord::ymax() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.yMax)
  return _internal_ymax();
}
inline void EdaDataFile_PackageRecord::_internal_set_ymax(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ymax_ = value;
}
inline void EdaDataFile_PackageRecord::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.yMax)
}

// optional string attributesIdString = 7;
inline bool EdaDataFile_PackageRecord::_internal_has_attributesidstring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile_PackageRecord::has_attributesidstring() const {
  return _internal_has_attributesidstring();
}
inline void EdaDataFile_PackageRecord::clear_attributesidstring() {
  _impl_.attributesidstring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EdaDataFile_PackageRecord::attributesidstring() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString)
  return _internal_attributesidstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile_PackageRecord::set_attributesidstring(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attributesidstring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString)
}
inline std::string* EdaDataFile_PackageRecord::mutable_attributesidstring() {
  std::string* _s = _internal_mutable_attributesidstring();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString)
  return _s;
}
inline const std::string& EdaDataFile_PackageRecord::_internal_attributesidstring() const {
  return _impl_.attributesidstring_.Get();
}
inline void EdaDataFile_PackageRecord::_internal_set_attributesidstring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attributesidstring_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord::_internal_mutable_attributesidstring() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attributesidstring_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile_PackageRecord::release_attributesidstring() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString)
  if (!_internal_has_attributesidstring()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attributesidstring_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributesidstring_.IsDefault()) {
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile_PackageRecord::set_allocated_attributesidstring(std::string* attributesidstring) {
  if (attributesidstring != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attributesidstring_.SetAllocated(attributesidstring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributesidstring_.IsDefault()) {
    _impl_.attributesidstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.PackageRecord.attributesIdString)
}

// repeated .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord pinRecords = 8;
inline int EdaDataFile_PackageRecord::_internal_pinrecords_size() const {
  return _impl_.pinrecords_.size();
}
inline int EdaDataFile_PackageRecord::pinrecords_size() const {
  return _internal_pinrecords_size();
}
inline void EdaDataFile_PackageRecord::clear_pinrecords() {
  _impl_.pinrecords_.Clear();
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* EdaDataFile_PackageRecord::mutable_pinrecords(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PackageRecord.pinRecords)
  return _impl_.pinrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
EdaDataFile_PackageRecord::mutable_pinrecords() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.PackageRecord.pinRecords)
  return &_impl_.pinrecords_;
}
inline const ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord& EdaDataFile_PackageRecord::_internal_pinrecords(int index) const {
  return _impl_.pinrecords_.Get(index);
}
inline const ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord& EdaDataFile_PackageRecord::pinrecords(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.pinRecords)
  return _internal_pinrecords(index);
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* EdaDataFile_PackageRecord::_internal_add_pinrecords() {
  return _impl_.pinrecords_.Add();
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* EdaDataFile_PackageRecord::add_pinrecords() {
  ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord* _add = _internal_add_pinrecords();
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.PackageRecord.pinRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
EdaDataFile_PackageRecord::pinrecords() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.PackageRecord.pinRecords)
  return _impl_.pinrecords_;
}

// map<string, .odbdesign.proto.EdaDataFile.PackageRecord.PinRecord> pinRecordsByName = 9;
inline int EdaDataFile_PackageRecord::_internal_pinrecordsbyname_size() const {
  return _impl_.pinrecordsbyname_.size();
}
inline int EdaDataFile_PackageRecord::pinrecordsbyname_size() const {
  return _internal_pinrecordsbyname_size();
}
inline void EdaDataFile_PackageRecord::clear_pinrecordsbyname() {
  _impl_.pinrecordsbyname_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
EdaDataFile_PackageRecord::_internal_pinrecordsbyname() const {
  return _impl_.pinrecordsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >&
EdaDataFile_PackageRecord::pinrecordsbyname() const {
  // @@protoc_insertion_point(field_map:odbdesign.proto.EdaDataFile.PackageRecord.pinRecordsByName)
  return _internal_pinrecordsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
EdaDataFile_PackageRecord::_internal_mutable_pinrecordsbyname() {
  return _impl_.pinrecordsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord >*
EdaDataFile_PackageRecord::mutable_pinrecordsbyname() {
  // @@protoc_insertion_point(field_mutable_map:odbdesign.proto.EdaDataFile.PackageRecord.pinRecordsByName)
  return _internal_mutable_pinrecordsbyname();
}

// repeated .odbdesign.proto.EdaDataFile.PropertyRecord propertyRecords = 10;
inline int EdaDataFile_PackageRecord::_internal_propertyrecords_size() const {
  return _impl_.propertyrecords_.size();
}
inline int EdaDataFile_PackageRecord::propertyrecords_size() const {
  return _internal_propertyrecords_size();
}
inline void EdaDataFile_PackageRecord::clear_propertyrecords() {
  _impl_.propertyrecords_.Clear();
}
inline ::odbdesign::proto::EdaDataFile_PropertyRecord* EdaDataFile_PackageRecord::mutable_propertyrecords(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.PackageRecord.propertyRecords)
  return _impl_.propertyrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PropertyRecord >*
EdaDataFile_PackageRecord::mutable_propertyrecords() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.PackageRecord.propertyRecords)
  return &_impl_.propertyrecords_;
}
inline const ::odbdesign::proto::EdaDataFile_PropertyRecord& EdaDataFile_PackageRecord::_internal_propertyrecords(int index) const {
  return _impl_.propertyrecords_.Get(index);
}
inline const ::odbdesign::proto::EdaDataFile_PropertyRecord& EdaDataFile_PackageRecord::propertyrecords(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.PackageRecord.propertyRecords)
  return _internal_propertyrecords(index);
}
inline ::odbdesign::proto::EdaDataFile_PropertyRecord* EdaDataFile_PackageRecord::_internal_add_propertyrecords() {
  return _impl_.propertyrecords_.Add();
}
inline ::odbdesign::proto::EdaDataFile_PropertyRecord* EdaDataFile_PackageRecord::add_propertyrecords() {
  ::odbdesign::proto::EdaDataFile_PropertyRecord* _add = _internal_add_propertyrecords();
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.PackageRecord.propertyRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PropertyRecord >&
EdaDataFile_PackageRecord::propertyrecords() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.PackageRecord.propertyRecords)
  return _impl_.propertyrecords_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EdaDataFile

// optional string path = 1;
inline bool EdaDataFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EdaDataFile::has_path() const {
  return _internal_has_path();
}
inline void EdaDataFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EdaDataFile::path() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.path)
}
inline std::string* EdaDataFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.path)
  return _s;
}
inline const std::string& EdaDataFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void EdaDataFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile::release_path() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.path)
}

// optional string units = 2;
inline bool EdaDataFile::_internal_has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdaDataFile::has_units() const {
  return _internal_has_units();
}
inline void EdaDataFile::clear_units() {
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EdaDataFile::units() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile::set_units(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.units_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.units)
}
inline std::string* EdaDataFile::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.units)
  return _s;
}
inline const std::string& EdaDataFile::_internal_units() const {
  return _impl_.units_.Get();
}
inline void EdaDataFile::_internal_set_units(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.units_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile::_internal_mutable_units() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.units_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile::release_units() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.units_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.units_.SetAllocated(units, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.units)
}

// optional string source = 3;
inline bool EdaDataFile::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdaDataFile::has_source() const {
  return _internal_has_source();
}
inline void EdaDataFile::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EdaDataFile::source() const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdaDataFile::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.source)
}
inline std::string* EdaDataFile::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.source)
  return _s;
}
inline const std::string& EdaDataFile::_internal_source() const {
  return _impl_.source_.Get();
}
inline void EdaDataFile::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* EdaDataFile::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* EdaDataFile::release_source() {
  // @@protoc_insertion_point(field_release:odbdesign.proto.EdaDataFile.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EdaDataFile::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:odbdesign.proto.EdaDataFile.source)
}

// repeated string layerNames = 4;
inline int EdaDataFile::_internal_layernames_size() const {
  return _impl_.layernames_.size();
}
inline int EdaDataFile::layernames_size() const {
  return _internal_layernames_size();
}
inline void EdaDataFile::clear_layernames() {
  _impl_.layernames_.Clear();
}
inline std::string* EdaDataFile::add_layernames() {
  std::string* _s = _internal_add_layernames();
  // @@protoc_insertion_point(field_add_mutable:odbdesign.proto.EdaDataFile.layerNames)
  return _s;
}
inline const std::string& EdaDataFile::_internal_layernames(int index) const {
  return _impl_.layernames_.Get(index);
}
inline const std::string& EdaDataFile::layernames(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.layerNames)
  return _internal_layernames(index);
}
inline std::string* EdaDataFile::mutable_layernames(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.layerNames)
  return _impl_.layernames_.Mutable(index);
}
inline void EdaDataFile::set_layernames(int index, const std::string& value) {
  _impl_.layernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::set_layernames(int index, std::string&& value) {
  _impl_.layernames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::set_layernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.layernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::set_layernames(int index, const char* value, size_t size) {
  _impl_.layernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:odbdesign.proto.EdaDataFile.layerNames)
}
inline std::string* EdaDataFile::_internal_add_layernames() {
  return _impl_.layernames_.Add();
}
inline void EdaDataFile::add_layernames(const std::string& value) {
  _impl_.layernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::add_layernames(std::string&& value) {
  _impl_.layernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::add_layernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.layernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:odbdesign.proto.EdaDataFile.layerNames)
}
inline void EdaDataFile::add_layernames(const char* value, size_t size) {
  _impl_.layernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:odbdesign.proto.EdaDataFile.layerNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EdaDataFile::layernames() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.layerNames)
  return _impl_.layernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EdaDataFile::mutable_layernames() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.layerNames)
  return &_impl_.layernames_;
}

// repeated string attributeNames = 5;
inline int EdaDataFile::_internal_attributenames_size() const {
  return _impl_.attributenames_.size();
}
inline int EdaDataFile::attributenames_size() const {
  return _internal_attributenames_size();
}
inline void EdaDataFile::clear_attributenames() {
  _impl_.attributenames_.Clear();
}
inline std::string* EdaDataFile::add_attributenames() {
  std::string* _s = _internal_add_attributenames();
  // @@protoc_insertion_point(field_add_mutable:odbdesign.proto.EdaDataFile.attributeNames)
  return _s;
}
inline const std::string& EdaDataFile::_internal_attributenames(int index) const {
  return _impl_.attributenames_.Get(index);
}
inline const std::string& EdaDataFile::attributenames(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.attributeNames)
  return _internal_attributenames(index);
}
inline std::string* EdaDataFile::mutable_attributenames(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.attributeNames)
  return _impl_.attributenames_.Mutable(index);
}
inline void EdaDataFile::set_attributenames(int index, const std::string& value) {
  _impl_.attributenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::set_attributenames(int index, std::string&& value) {
  _impl_.attributenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::set_attributenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::set_attributenames(int index, const char* value, size_t size) {
  _impl_.attributenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:odbdesign.proto.EdaDataFile.attributeNames)
}
inline std::string* EdaDataFile::_internal_add_attributenames() {
  return _impl_.attributenames_.Add();
}
inline void EdaDataFile::add_attributenames(const std::string& value) {
  _impl_.attributenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::add_attributenames(std::string&& value) {
  _impl_.attributenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::add_attributenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:odbdesign.proto.EdaDataFile.attributeNames)
}
inline void EdaDataFile::add_attributenames(const char* value, size_t size) {
  _impl_.attributenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:odbdesign.proto.EdaDataFile.attributeNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EdaDataFile::attributenames() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.attributeNames)
  return _impl_.attributenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EdaDataFile::mutable_attributenames() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.attributeNames)
  return &_impl_.attributenames_;
}

// repeated string attributeTextValues = 6;
inline int EdaDataFile::_internal_attributetextvalues_size() const {
  return _impl_.attributetextvalues_.size();
}
inline int EdaDataFile::attributetextvalues_size() const {
  return _internal_attributetextvalues_size();
}
inline void EdaDataFile::clear_attributetextvalues() {
  _impl_.attributetextvalues_.Clear();
}
inline std::string* EdaDataFile::add_attributetextvalues() {
  std::string* _s = _internal_add_attributetextvalues();
  // @@protoc_insertion_point(field_add_mutable:odbdesign.proto.EdaDataFile.attributeTextValues)
  return _s;
}
inline const std::string& EdaDataFile::_internal_attributetextvalues(int index) const {
  return _impl_.attributetextvalues_.Get(index);
}
inline const std::string& EdaDataFile::attributetextvalues(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.attributeTextValues)
  return _internal_attributetextvalues(index);
}
inline std::string* EdaDataFile::mutable_attributetextvalues(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.attributeTextValues)
  return _impl_.attributetextvalues_.Mutable(index);
}
inline void EdaDataFile::set_attributetextvalues(int index, const std::string& value) {
  _impl_.attributetextvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::set_attributetextvalues(int index, std::string&& value) {
  _impl_.attributetextvalues_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::set_attributetextvalues(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributetextvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::set_attributetextvalues(int index, const char* value, size_t size) {
  _impl_.attributetextvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline std::string* EdaDataFile::_internal_add_attributetextvalues() {
  return _impl_.attributetextvalues_.Add();
}
inline void EdaDataFile::add_attributetextvalues(const std::string& value) {
  _impl_.attributetextvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::add_attributetextvalues(std::string&& value) {
  _impl_.attributetextvalues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::add_attributetextvalues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributetextvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline void EdaDataFile::add_attributetextvalues(const char* value, size_t size) {
  _impl_.attributetextvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:odbdesign.proto.EdaDataFile.attributeTextValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EdaDataFile::attributetextvalues() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.attributeTextValues)
  return _impl_.attributetextvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EdaDataFile::mutable_attributetextvalues() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.attributeTextValues)
  return &_impl_.attributetextvalues_;
}

// repeated .odbdesign.proto.EdaDataFile.NetRecord netRecords = 7;
inline int EdaDataFile::_internal_netrecords_size() const {
  return _impl_.netrecords_.size();
}
inline int EdaDataFile::netrecords_size() const {
  return _internal_netrecords_size();
}
inline void EdaDataFile::clear_netrecords() {
  _impl_.netrecords_.Clear();
}
inline ::odbdesign::proto::EdaDataFile_NetRecord* EdaDataFile::mutable_netrecords(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.netRecords)
  return _impl_.netrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord >*
EdaDataFile::mutable_netrecords() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.netRecords)
  return &_impl_.netrecords_;
}
inline const ::odbdesign::proto::EdaDataFile_NetRecord& EdaDataFile::_internal_netrecords(int index) const {
  return _impl_.netrecords_.Get(index);
}
inline const ::odbdesign::proto::EdaDataFile_NetRecord& EdaDataFile::netrecords(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.netRecords)
  return _internal_netrecords(index);
}
inline ::odbdesign::proto::EdaDataFile_NetRecord* EdaDataFile::_internal_add_netrecords() {
  return _impl_.netrecords_.Add();
}
inline ::odbdesign::proto::EdaDataFile_NetRecord* EdaDataFile::add_netrecords() {
  ::odbdesign::proto::EdaDataFile_NetRecord* _add = _internal_add_netrecords();
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.netRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_NetRecord >&
EdaDataFile::netrecords() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.netRecords)
  return _impl_.netrecords_;
}

// map<string, .odbdesign.proto.EdaDataFile.NetRecord> netRecordsByName = 8;
inline int EdaDataFile::_internal_netrecordsbyname_size() const {
  return _impl_.netrecordsbyname_.size();
}
inline int EdaDataFile::netrecordsbyname_size() const {
  return _internal_netrecordsbyname_size();
}
inline void EdaDataFile::clear_netrecordsbyname() {
  _impl_.netrecordsbyname_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >&
EdaDataFile::_internal_netrecordsbyname() const {
  return _impl_.netrecordsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >&
EdaDataFile::netrecordsbyname() const {
  // @@protoc_insertion_point(field_map:odbdesign.proto.EdaDataFile.netRecordsByName)
  return _internal_netrecordsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >*
EdaDataFile::_internal_mutable_netrecordsbyname() {
  return _impl_.netrecordsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_NetRecord >*
EdaDataFile::mutable_netrecordsbyname() {
  // @@protoc_insertion_point(field_mutable_map:odbdesign.proto.EdaDataFile.netRecordsByName)
  return _internal_mutable_netrecordsbyname();
}

// repeated .odbdesign.proto.EdaDataFile.PackageRecord packageRecords = 9;
inline int EdaDataFile::_internal_packagerecords_size() const {
  return _impl_.packagerecords_.size();
}
inline int EdaDataFile::packagerecords_size() const {
  return _internal_packagerecords_size();
}
inline void EdaDataFile::clear_packagerecords() {
  _impl_.packagerecords_.Clear();
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord* EdaDataFile::mutable_packagerecords(int index) {
  // @@protoc_insertion_point(field_mutable:odbdesign.proto.EdaDataFile.packageRecords)
  return _impl_.packagerecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord >*
EdaDataFile::mutable_packagerecords() {
  // @@protoc_insertion_point(field_mutable_list:odbdesign.proto.EdaDataFile.packageRecords)
  return &_impl_.packagerecords_;
}
inline const ::odbdesign::proto::EdaDataFile_PackageRecord& EdaDataFile::_internal_packagerecords(int index) const {
  return _impl_.packagerecords_.Get(index);
}
inline const ::odbdesign::proto::EdaDataFile_PackageRecord& EdaDataFile::packagerecords(int index) const {
  // @@protoc_insertion_point(field_get:odbdesign.proto.EdaDataFile.packageRecords)
  return _internal_packagerecords(index);
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord* EdaDataFile::_internal_add_packagerecords() {
  return _impl_.packagerecords_.Add();
}
inline ::odbdesign::proto::EdaDataFile_PackageRecord* EdaDataFile::add_packagerecords() {
  ::odbdesign::proto::EdaDataFile_PackageRecord* _add = _internal_add_packagerecords();
  // @@protoc_insertion_point(field_add:odbdesign.proto.EdaDataFile.packageRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odbdesign::proto::EdaDataFile_PackageRecord >&
EdaDataFile::packagerecords() const {
  // @@protoc_insertion_point(field_list:odbdesign.proto.EdaDataFile.packageRecords)
  return _impl_.packagerecords_;
}

// map<string, .odbdesign.proto.EdaDataFile.PackageRecord> packageRecordsByName = 10;
inline int EdaDataFile::_internal_packagerecordsbyname_size() const {
  return _impl_.packagerecordsbyname_.size();
}
inline int EdaDataFile::packagerecordsbyname_size() const {
  return _internal_packagerecordsbyname_size();
}
inline void EdaDataFile::clear_packagerecordsbyname() {
  _impl_.packagerecordsbyname_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >&
EdaDataFile::_internal_packagerecordsbyname() const {
  return _impl_.packagerecordsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >&
EdaDataFile::packagerecordsbyname() const {
  // @@protoc_insertion_point(field_map:odbdesign.proto.EdaDataFile.packageRecordsByName)
  return _internal_packagerecordsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >*
EdaDataFile::_internal_mutable_packagerecordsbyname() {
  return _impl_.packagerecordsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::odbdesign::proto::EdaDataFile_PackageRecord >*
EdaDataFile::mutable_packagerecordsbyname() {
  // @@protoc_insertion_point(field_mutable_map:odbdesign.proto.EdaDataFile.packageRecordsByName)
  return _internal_mutable_packagerecordsbyname();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace odbdesign

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type>() {
  return ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_FeatureIdRecord_Type_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type>() {
  return ::odbdesign::proto::EdaDataFile_NetRecord_SubnetRecord_Type_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType>() {
  return ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_FillType_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType>() {
  return ::odbdesign::proto::EdaDataFile_NetRecord_PlaneSubnetRecord_CutoutType_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type>() {
  return ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_Type_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType>() {
  return ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_ElectricalType_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType>() {
  return ::odbdesign::proto::EdaDataFile_PackageRecord_PinRecord_MountType_descriptor();
}
template <> struct is_proto_enum< ::odbdesign::proto::EdaDataFile_BoardSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::odbdesign::proto::EdaDataFile_BoardSide>() {
  return ::odbdesign::proto::EdaDataFile_BoardSide_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_edadatafile_2eproto
